{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":379,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":11,\"intelligence\":0,\"hacking_chance_mult\":1.0201,\"hacking_speed_mult\":1.050703,\"hacking_money_mult\":1.0201,\"hacking_grow_mult\":1.0201,\"hacking_exp\":33605376.49829221,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":206.34705212003811,\"intelligence_exp\":0,\"hacking_mult\":1.071105,\"strength_mult\":1.0201,\"defense_mult\":1.0201,\"dexterity_mult\":1.1221100000000002,\"agility_mult\":1.0201,\"charisma_mult\":1.0201,\"hacking_exp_mult\":1.1221100000000002,\"strength_exp_mult\":1.1221100000000002,\"defense_exp_mult\":1.1221100000000002,\"dexterity_exp_mult\":1.1221100000000002,\"agility_exp_mult\":1.1221100000000002,\"charisma_exp_mult\":1.1221100000000002,\"company_rep_mult\":1.0201,\"faction_rep_mult\":1.0201,\"money\":\"7210676946.4446366108\",\"homeComputer\":\"0.2.0.6\",\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Central Intelligence Agency\":\"IT Intern\"},\"companyName\":\"Central Intelligence Agency\",\"currentServer\":\"0.2.0.6\",\"purchasedServers\":[\"54.9.5.2\",\"4.8.2.4\",\"30.7.4.1\",\"18.1.7.3\",\"46.0.9.8\",\"39.0.7.4\",\"87.9.8.3\",\"48.4.0.0\",\"17.1.2.9\",\"0.1.7.3\",\"85.0.1.8\",\"60.3.3.5\",\"70.2.6.4\",\"60.0.9.3\",\"23.6.2.2\",\"29.4.8.0\",\"9.7.1.3\",\"57.1.0.4\",\"43.4.7.3\",\"57.8.6.4\",\"50.3.4.6\",\"6.3.5.8\",\"90.6.6.4\",\"82.3.3.3\",\"44.3.2.6\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9979.362696370748,\"onlineTimeSeconds\":177641.20000104842,\"ram\":64,\"totalMoneyGenerated\":1043715171.9493011,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177638.80000104842,\"ram\":64,\"totalMoneyGenerated\":275210185.727946,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177638.20000104845,\"ram\":64,\"totalMoneyGenerated\":275077442.96423364,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177637.40000104843,\"ram\":64,\"totalMoneyGenerated\":275078631.74735653,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177637.00000104844,\"ram\":64,\"totalMoneyGenerated\":274917634.86380976,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177636.80000104842,\"ram\":64,\"totalMoneyGenerated\":274913652.6517664,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177636.6000010484,\"ram\":64,\"totalMoneyGenerated\":274910227.7385157,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177636.40000104843,\"ram\":64,\"totalMoneyGenerated\":274907382.8473878,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177629.00000104844,\"ram\":64,\"totalMoneyGenerated\":274902808.8616696,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177628.80000104842,\"ram\":64,\"totalMoneyGenerated\":274900528.8437777,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177628.00000104844,\"ram\":64,\"totalMoneyGenerated\":274895970.67994446,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":177627.60000104844,\"ram\":64,\"totalMoneyGenerated\":274893120.41275567,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":96410.59999965434,\"ram\":64,\"totalMoneyGenerated\":274751674.10591274,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":96409.39999965433,\"ram\":64,\"totalMoneyGenerated\":274749389.93104637,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":96406.39999965433,\"ram\":64,\"totalMoneyGenerated\":274746530.37061256,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2851.246484677357,\"onlineTimeSeconds\":96396.19999965429,\"ram\":64,\"totalMoneyGenerated\":274744226.45667726,\"name\":\"hacknet-node-15\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Sector-12\",\"NiteSec\",\"Aevum\",\"Netburners\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.0201,\"crime_success_mult\":1.0201,\"isWorking\":false,\"focus\":true,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.0201,\"hacknet_node_money_mult\":1.0201,\"hacknet_node_purchase_cost_mult\":0.9801,\"hacknet_node_ram_cost_mult\":0.9801,\"hacknet_node_core_cost_mult\":0.9801,\"hacknet_node_level_cost_mult\":0.9801,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1628313460758,\"totalPlaytime\":443488400,\"playtimeSinceLastAug\":185214000,\"playtimeSinceLastBitnode\":443488400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":25997000,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":129437889916.93721,\"hacknetnode\":5167314580.537498,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":507465.30401364446,\"total\":134632317817.3642,\"work\":608852.805600025}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":25997000,\"class\":-43200,\"codingcontract\":0,\"corporation\":0,\"crime\":1037000,\"gang\":0,\"hacking\":131931332307.93721,\"hacknetnode\":5177686420.664981,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":507465.30401364446,\"total\":137137341648.43115,\"work\":824652.8056002526}},\"scriptProdSinceLastAug\":129437830437.93721,\"exploits\":[],\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0,\"factionWorkType\":\"Faction Hacking Work\"}}","AllServersSave":"{\"0.2.0.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"0.2.0.6\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}}],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"relaySMTP.exe\",\"SQLInject.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var availableHosts = scan('home');\\nvar discoveredHosts = ['home'];\\n\\nfor (var i = 0; i < availableHosts.length; i++) {\\n  var current = availableHosts[i];\\n  discoveredHosts.push(current);\\n\\n  depthFirstSearch(current);\\n\\n  print(\\\"Discovered hosts so far (\\\" + (i + 1) + \\\"/\\\" + availableHosts.length + \\\" root nodes done): \\\" + discoveredHosts);\\n}\\n\\ndiscoveredHosts.splice(0, 1); //Need to remove home from the discovery results\\nwrite('host-names.db', discoveredHosts, 'w');\\n\\nfunction depthFirstSearch(rootNode) {\\n  var hostsToExplore = [rootNode];\\n\\n  while (hostsToExplore.length > 0) {\\n    var host = hostsToExplore.pop();\\n    var scanResults = scan(host);\\n\\n    scanResults = removeAlreadyDiscovered(scanResults);\\n\\n    print(\\\"Scan results (unexplored only) for \\\" + host + \\\": \\\" + scanResults);\\n\\n    hostsToExplore = hostsToExplore.concat(scanResults);\\n    discoveredHosts = discoveredHosts.concat(scanResults);\\n\\n    print(\\\"Hosts to explore: \\\" + hostsToExplore);\\n  }\\n}\\n\\nfunction removeAlreadyDiscovered(scanResults) {\\n  for (var i = 0; i < scanResults.length; i++) {\\n    var result = scanResults[i];\\n    if (discoveredHosts.indexOf(result) > -1) {\\n      scanResults.splice(i, 1);\\n    }\\n  }\\n\\n  return scanResults;\\n}\",\"filename\":\"discovery.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.8,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":201}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var hosts = JSON.parse(read('hosts-info.db.txt'));\\nvar hackCommands = createHackCommands();\\n\\nvar maxNumberOfHackeablePorts = getMaximumNumberOfHackeablePorts();\\nvar eligibleHosts = getEligibleHosts(hosts, maxNumberOfHackeablePorts);\\n\\nfor (var i = 0; i < eligibleHosts.length; i++) {\\n  var target = eligibleHosts[i];\\n  print('Rooting ' + target.hostName + ' - ' + target.numberOfPortsRequired + ' ports required');     \\n  rootTheirAss(target);  \\n}\\n\\nfunction rootTheirAss(target) {\\n  for (var i = target.numberOfPortsRequired; i > -1; i--) {\\n    hackCommands[i](target.hostName);\\n  }\\n}\\n\\nfunction createHackCommands() {\\n  var nukeDelegate = function (target) { nuke(target); };\\n  var sshDelegate = function (target) { brutessh(target); };\\n  var ftpDelegate = function (target) { ftpcrack(target); };\\n  var smtpDelegate = function (target) { relaysmtp(target); };\\n  var httpDelegate = function (target) { httpworm(target); };\\n  var sqliDelegate = function (target) { sqlinject(target); };\\n\\n  return [nukeDelegate, sshDelegate, ftpDelegate, smtpDelegate, httpDelegate, sqliDelegate];\\n}\\n\\nfunction getMaximumNumberOfHackeablePorts() {\\n  var numberOfPorts = 0;\\n\\n  if (fileExists('BruteSSH.exe')) { numberOfPorts++; }\\n  if (fileExists('FTPCrack.exe')) { numberOfPorts++; }\\n  if (fileExists('relaySMTP.exe')) { numberOfPorts++; }\\n  if (fileExists('HTTPWorm.exe')) { numberOfPorts++; }\\n  if (fileExists('SQLInject.exe')) { numberOfPorts++; }\\n\\n  return numberOfPorts;\\n}\\n\\nfunction getEligibleHosts(hosts, maxNumberOfHackeablePorts) {\\n  var result = [];\\n\\n  print('Finding eligible hosts...');\\n\\n  for (var i = 0; i < hosts.length; i++) {\\n    var host = hosts[i];\\n\\n    if (!host.hasRootAccess && maxNumberOfHackeablePorts >= host.numberOfPortsRequired) {\\n      result.push(host);\\n    }\\n  }\\n\\n  print('Rooting ' + result.length + ' hosts, ' + maxNumberOfHackeablePorts + ' maximum hackable ports');\\n\\n  return result;\\n}\",\"filename\":\"rootkit.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.05,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":202}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var hosts = read(\\\"host-names.db.txt\\\").split(',');\\nvar ONE_MILLION = 1000000;\\nvar TWO_DECIMAL_PLACES = 2;\\n\\nresult = [];\\n\\nfor (var i = 0; i < hosts.length; i++) {\\n  var target = hosts[i];\\n  print('=========' + target + ' (' + calculateProgress(i) + '% done)' + '=========')\\n  result.push(createServerInfoObject(target));\\n}\\n\\nwrite('hosts-info.db', JSON.stringify(result), 'w');\\n\\nfunction calculateProgress(currentIndex) {\\n  return (((currentIndex + 1) / hosts.length) * 100).toFixed(TWO_DECIMAL_PLACES);\\n}\\n\\nfunction createServerInfoObject(target) {\\n  return {\\n    hostName: target,\\n    hasRootAccess: hasRootAccess(target),\\n    hackChancePercentage: Math.floor(hackChance(target) * 100),\\n    maxMoneyInMillions: parseFloat((getServerMaxMoney(target) / ONE_MILLION).toFixed(TWO_DECIMAL_PLACES)),\\n    availableMoneyInMillions: parseFloat((getServerMoneyAvailable(target) / ONE_MILLION).toFixed(TWO_DECIMAL_PLACES)),\\n    numberOfPortsRequired: getServerNumPortsRequired(target),\\n    hackTimeInSeconds: parseFloat(getHackTime(target).toFixed(TWO_DECIMAL_PLACES)),\\n    growTimeInSeconds: parseFloat(getGrowTime(target).toFixed(TWO_DECIMAL_PLACES)),\\n    weakenTimeInSeconds: parseFloat(getWeakenTime(target).toFixed(TWO_DECIMAL_PLACES)),\\n    maxRAM: parseFloat(getServerMaxRam(target).toFixed(TWO_DECIMAL_PLACES))\\n  };\\n\\n}\",\"filename\":\"enrich-discovery.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var HACK_CHANCE_WEIGHT = 9;\\nvar MAX_MONEY_WEIGHT = 5;\\nvar AVAILABLE_MONEY_WEIGHT = 10;\\nvar hosts = JSON.parse(read('hosts-info.db.txt'));\\nvar ellegibleToHack = [];\\nvar result = [];\\n\\nvar maxMaximumMoney = 0;\\nvar maxAvailableMoney = 0;\\n\\nprint('Finding ellegible hosts...')\\nfor (var i = 0; i < hosts.length; i++) {\\n  printProgress(i, hosts.length);\\n  var host = hosts[i];\\n\\n  if (host.hasRootAccess) {\\n    ellegibleToHack.push(host);\\n    maxMaximumMoney = Math.max(maxMaximumMoney, host.maxMoneyInMillions); \\n    maxAvailableMoney = Math.max(maxAvailableMoney, host.availableMoneyInMillions);\\n  }\\n}\\n\\nprint('maxMoney: ' + maxMaximumMoney);\\nprint('maxAvailableMoney: ' + maxAvailableMoney);\\n\\nprint('Classifying hosts...')\\nfor (var i = 0; i < ellegibleToHack.length; i++) { \\n  printProgress(i, ellegibleToHack.length);  \\n  var host = ellegibleToHack[i];\\n  \\n  var normalizedHackPercentage = (host.hackChancePercentage / 100);\\n  var normalizedMaxMoney = (host.maxMoneyInMillions / maxMaximumMoney);\\n  var normalizedAvailableMoney = (host.availableMoneyInMillions / maxAvailableMoney);\\n\\n  host['score'] = \\n    (\\n      normalizedHackPercentage * HACK_CHANCE_WEIGHT \\n      + normalizedMaxMoney * MAX_MONEY_WEIGHT \\n      + normalizedAvailableMoney * AVAILABLE_MONEY_WEIGHT\\n    )\\n    / (HACK_CHANCE_WEIGHT + MAX_MONEY_WEIGHT + AVAILABLE_MONEY_WEIGHT);\\n\\n  print('Host: ' + host.hostName + ' - Score: ' + host.score);\\n  result.push(host);\\n}\\n\\nwrite('hosts-info-classified.db', JSON.stringify(result), 'w');\\n\\nfunction printProgress(current, total){\\n  var progress = (current/total * 100).toFixed(2);\\n  print('Progress: ' + progress + '%');\\n}\",\"filename\":\"classify.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.65,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var script = args[0] || 'hack-target.script';\\nvar scriptTarget = args[1] || 'n00dles';\\nvar servers = getPurchasedServers();\\nvar scriptRAM = 2.40;\\n\\nfor (var i = 0; i < servers.length; i++){\\n    var server = servers[i];\\n    var maxRam = getServerMaxRam(server);\\n    var maxPossibleInstances = Math.floor(maxRam / scriptRAM);\\n    \\n    killall(server);\\n    scp(script, server);\\n    exec(script, server, maxPossibleInstances, scriptTarget);\\n}\",\"filename\":\"update-purchased-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.3,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var targetScript = args[0] || \\\"hack-target.script\\\";\\nvar possibleHosts = JSON.parse(read('hosts-info.db.txt'));\\n\\nvar purchasedServers = getPurchasedServers();\\n\\nfor (var i = 0; i < purchasedServers.length; i++){\\n  var server = purchasedServers[i]; \\n  print('Infecting ' + server + ' with ' + targetScript);\\n  scp(targetScript, server);  \\n}\\n\\nfor (var i = 0; i < possibleHosts.length; i++) {\\n    var target = possibleHosts[i];\\n    \\n    if (target.hasRootAccess) {\\n        print('Infecting ' + target.hostName + ' with ' + targetScript);\\n        scp(targetScript, target.hostName);        \\n    }\\n}\",\"filename\":\"corona-infect.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.5,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var targetScript = args[0] || \\\"hack-target.script\\\";\\nvar targetMachine = args[1] || 'n00dles';\\nvar possibleHosts = JSON.parse(read('hosts-info.db.txt'));\\nvar scriptRAM = getScriptRam(targetScript);\\nvar purchasedServers = getPurchasedServers();\\n\\n\\nfor (var i = 0; i < purchasedServers.length; i++){\\n  var server = purchasedServers[i];\\n  var maxRam = getServerMaxRam(server);\\n  var maxPossibleThreads = Math.floor(maxRam / scriptRAM);\\n  \\n  print('Executing ' + targetScript + ' targetting ' + targetMachine + ' on host ' + server + ' using ' + maxPossibleThreads + ' threads');\\n\\n  killall(server);  \\n  exec(targetScript, server, maxPossibleThreads, targetMachine);\\n}\\n\\nfor (var i = 0; i < possibleHosts.length; i++) {\\n  var target = possibleHosts[i];\\n\\n  if (target.hasRootAccess) {\\n\\n    if (target.maxRAM == 0) { continue; }\\n\\n    var maxPossibleThreads = Math.floor(target.maxRAM / scriptRAM);\\n\\n    print('Executing ' + targetScript + ' targetting ' + targetMachine + ' on host ' + target.hostName + ' using ' + maxPossibleThreads + ' threads');\\n\\n    killall(target.hostName);\\n    exec(targetScript, target.hostName, maxPossibleThreads, targetMachine);\\n  }\\n}\",\"filename\":\"orchestrator.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.85,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var serverName = args[0];\\nkillall(serverName);\\ndeleteServer(serverName);\",\"filename\":\"sell-single-server.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.35,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var purchasedServers = getPurchasedServers();\\n\\nfor(var i = 0; i < purchasedServers.length; i++){\\n    var host = purchasedServers[i];\\n    \\n    print(\\\"Deleting server: \\\" + host);\\n    killall(host);\\n    deleteServer(host);\\n}\",\"filename\":\"sell-all-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.6,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var ram = args[0] || 8;\\nvar scriptTarget = args[1] || 'n00dles';\\nvar scriptName = 'hack-target.script';\\nvar scriptRAM =  getScriptRam(scriptName);\\n\\nvar serverCount = 0;\\n\\n// Continuously try to purchase servers until we've reached the maximum amount of servers\\nwhile (serverCount < getPurchasedServerLimit()) {    \\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {        \\n        var hostname = purchaseServer(\\\"pserv-\\\" + serverCount, ram);\\n        var maxPossibleThreads = Math.floor(ram/scriptRAM);\\n\\n        scp(scriptName, hostname);\\n        exec(scriptName, hostname, maxPossibleThreads, scriptTarget);\\n        serverCount++;\\n    }\\n}\",\"filename\":\"purchase-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.25,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: 230});\\n    } else {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: 230, stock: true});\\n    }\\n}\",\"filename\":\"grow-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.1,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":212}}],\"serversOnNetwork\":[\"10.3.6.6\",\"89.6.4.8\",\"42.9.0.1\",\"11.8.7.4\",\"75.8.2.1\",\"53.5.2.2\",\"29.2.5.5\",\"79.1.1.7\",\"54.9.5.2\",\"4.8.2.4\",\"30.7.4.1\",\"18.1.7.3\",\"46.0.9.8\",\"39.0.7.4\",\"87.9.8.3\",\"48.4.0.0\",\"17.1.2.9\",\"0.1.7.3\",\"85.0.1.8\",\"60.3.3.5\",\"70.2.6.4\",\"60.0.9.3\",\"23.6.2.2\",\"29.4.8.0\",\"9.7.1.3\",\"57.1.0.4\",\"43.4.7.3\",\"57.8.6.4\",\"50.3.4.6\",\"6.3.5.8\",\"90.6.6.4\",\"82.3.3.3\",\"44.3.2.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"host-names.db.txt\",\"text\":\"n00dles,foodnstuff,zer0,nectar-net,silver-helix,phantasy,johnson-ortho,rothman-uni,syscore,the-hub,comptek,netlink,crush-fitness,zb-institute,I.I.I.I,lexo-corp,rho-construction,millenium-fitness,sigma-cosmetics,max-hardware,neo-net,omega-net,avmnite-02h,summit-uni,catalyst,alpha-ent,aevum-police,snap-fitness,deltaone,icarus,galactic-cyber,aerocorp,global-pharm,omnia,defcomm,univ-energy,solaris,zeus-med,taiyang-digital,nova-med,infocomm,zb-def,titan-labs,applied-energetics,run4theh111z,helios,vitalife,kuai-gong,.,b-and-a,powerhouse-fitness,ecorp,megacorp,clarkinc,microdyne,fulcrumtech,stormtech,omnitek,4sigma,blade,nwo,fulcrumassets,The-Cave,unitalife,joesguns,hong-fang-tea,harakiri-sushi,CSEC,iron-gym\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"hosts-info.db.txt\",\"text\":\"[{\\\"hostName\\\":\\\"n00dles\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":100,\\\"maxMoneyInMillions\\\":1.75,\\\"availableMoneyInMillions\\\":1.58,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":5.72,\\\"growTimeInSeconds\\\":18.31,\\\"weakenTimeInSeconds\\\":22.89,\\\"maxRAM\\\":4},{\\\"hostName\\\":\\\"foodnstuff\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":96,\\\"maxMoneyInMillions\\\":50,\\\"availableMoneyInMillions\\\":50,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":5.83,\\\"growTimeInSeconds\\\":18.67,\\\"weakenTimeInSeconds\\\":23.33,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"zer0\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":67,\\\"maxMoneyInMillions\\\":187.5,\\\"availableMoneyInMillions\\\":7.5,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":59.06,\\\"growTimeInSeconds\\\":188.98,\\\"weakenTimeInSeconds\\\":236.23,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"nectar-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":79,\\\"maxMoneyInMillions\\\":68.75,\\\"availableMoneyInMillions\\\":2.75,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":17.08,\\\"growTimeInSeconds\\\":54.65,\\\"weakenTimeInSeconds\\\":68.31,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"silver-helix\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":30,\\\"maxMoneyInMillions\\\":1125,\\\"availableMoneyInMillions\\\":0.11,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":268.03,\\\"growTimeInSeconds\\\":857.71,\\\"weakenTimeInSeconds\\\":1072.13,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"phantasy\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":68,\\\"maxMoneyInMillions\\\":600,\\\"availableMoneyInMillions\\\":24,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":62.61,\\\"growTimeInSeconds\\\":200.37,\\\"weakenTimeInSeconds\\\":250.46,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"johnson-ortho\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":21,\\\"maxMoneyInMillions\\\":2062.8,\\\"availableMoneyInMillions\\\":82.51,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":502.97,\\\"growTimeInSeconds\\\":1609.49,\\\"weakenTimeInSeconds\\\":2011.87,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"rothman-uni\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":17,\\\"maxMoneyInMillions\\\":5981.63,\\\"availableMoneyInMillions\\\":239.27,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":612.49,\\\"growTimeInSeconds\\\":1959.95,\\\"weakenTimeInSeconds\\\":2449.94,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"syscore\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":10026.4,\\\"availableMoneyInMillions\\\":401.06,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1104.67,\\\"growTimeInSeconds\\\":3534.93,\\\"weakenTimeInSeconds\\\":4418.66,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"the-hub\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":34,\\\"maxMoneyInMillions\\\":4668.08,\\\"availableMoneyInMillions\\\":186.72,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":326.73,\\\"growTimeInSeconds\\\":1045.55,\\\"weakenTimeInSeconds\\\":1306.94,\\\"maxRAM\\\":8},{\\\"hostName\\\":\\\"comptek\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":22,\\\"maxMoneyInMillions\\\":6186.13,\\\"availableMoneyInMillions\\\":247.45,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":510.22,\\\"growTimeInSeconds\\\":1632.72,\\\"weakenTimeInSeconds\\\":2040.9,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"netlink\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":11,\\\"maxMoneyInMillions\\\":6875,\\\"availableMoneyInMillions\\\":275,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":788.66,\\\"growTimeInSeconds\\\":2523.71,\\\"weakenTimeInSeconds\\\":3154.64,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"crush-fitness\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":38,\\\"maxMoneyInMillions\\\":1267.46,\\\"availableMoneyInMillions\\\":50.7,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":277.64,\\\"growTimeInSeconds\\\":888.45,\\\"weakenTimeInSeconds\\\":1110.56,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"zb-institute\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":25098.09,\\\"availableMoneyInMillions\\\":1003.92,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1688.78,\\\"growTimeInSeconds\\\":5404.08,\\\"weakenTimeInSeconds\\\":6755.1,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"I.I.I.I\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":47,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":5.69,\\\"growTimeInSeconds\\\":18.22,\\\"weakenTimeInSeconds\\\":22.77,\\\"maxRAM\\\":128},{\\\"hostName\\\":\\\"lexo-corp\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":18196.16,\\\"availableMoneyInMillions\\\":727.85,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1271.76,\\\"growTimeInSeconds\\\":4069.64,\\\"weakenTimeInSeconds\\\":5087.05,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"rho-construction\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":14,\\\"maxMoneyInMillions\\\":13313.51,\\\"availableMoneyInMillions\\\":532.54,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":579.81,\\\"growTimeInSeconds\\\":1855.4,\\\"weakenTimeInSeconds\\\":2319.25,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"millenium-fitness\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":10,\\\"maxMoneyInMillions\\\":6250,\\\"availableMoneyInMillions\\\":250,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":786.81,\\\"growTimeInSeconds\\\":2517.79,\\\"weakenTimeInSeconds\\\":3147.24,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"sigma-cosmetics\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":91,\\\"maxMoneyInMillions\\\":57.5,\\\"availableMoneyInMillions\\\":2.3,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":7.12,\\\"growTimeInSeconds\\\":22.77,\\\"weakenTimeInSeconds\\\":28.46,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"max-hardware\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":84,\\\"maxMoneyInMillions\\\":250,\\\"availableMoneyInMillions\\\":3.2,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":17.41,\\\"growTimeInSeconds\\\":55.72,\\\"weakenTimeInSeconds\\\":69.65,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"neo-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":70,\\\"maxMoneyInMillions\\\":125,\\\"availableMoneyInMillions\\\":5,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":41.27,\\\"growTimeInSeconds\\\":132.06,\\\"weakenTimeInSeconds\\\":165.08,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"omega-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":29,\\\"maxMoneyInMillions\\\":1617.86,\\\"availableMoneyInMillions\\\":0.59,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":312.62,\\\"growTimeInSeconds\\\":1000.4,\\\"weakenTimeInSeconds\\\":1250.5,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"avmnite-02h\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":67,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":5.69,\\\"growTimeInSeconds\\\":18.22,\\\"weakenTimeInSeconds\\\":22.77,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"summit-uni\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":17,\\\"maxMoneyInMillions\\\":8048.73,\\\"availableMoneyInMillions\\\":321.95,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":586.98,\\\"growTimeInSeconds\\\":1878.35,\\\"weakenTimeInSeconds\\\":2347.94,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"catalyst\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":11,\\\"maxMoneyInMillions\\\":8065.74,\\\"availableMoneyInMillions\\\":322.63,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":799.33,\\\"growTimeInSeconds\\\":2557.87,\\\"weakenTimeInSeconds\\\":3197.34,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"alpha-ent\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":5,\\\"maxMoneyInMillions\\\":15677.72,\\\"availableMoneyInMillions\\\":627.11,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":992.1,\\\"growTimeInSeconds\\\":3174.73,\\\"weakenTimeInSeconds\\\":3968.41,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"aevum-police\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":7,\\\"maxMoneyInMillions\\\":5311.55,\\\"availableMoneyInMillions\\\":212.46,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":921.01,\\\"growTimeInSeconds\\\":2947.22,\\\"weakenTimeInSeconds\\\":3684.02,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"snap-fitness\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":11250,\\\"availableMoneyInMillions\\\":450,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1093.48,\\\"growTimeInSeconds\\\":3499.14,\\\"weakenTimeInSeconds\\\":4373.92,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"deltaone\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":40043.45,\\\"availableMoneyInMillions\\\":1601.74,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2086.86,\\\"growTimeInSeconds\\\":6677.96,\\\"weakenTimeInSeconds\\\":8347.45,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"icarus\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":23039.7,\\\"availableMoneyInMillions\\\":921.59,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2172.16,\\\"growTimeInSeconds\\\":6950.92,\\\"weakenTimeInSeconds\\\":8688.65,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"galactic-cyber\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":19551.04,\\\"availableMoneyInMillions\\\":782.04,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1535.17,\\\"growTimeInSeconds\\\":4912.55,\\\"weakenTimeInSeconds\\\":6140.68,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"aerocorp\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":26322.2,\\\"availableMoneyInMillions\\\":1052.89,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2247.75,\\\"growTimeInSeconds\\\":7192.81,\\\"weakenTimeInSeconds\\\":8991.02,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"global-pharm\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":38375.78,\\\"availableMoneyInMillions\\\":1535.03,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1736.14,\\\"growTimeInSeconds\\\":5555.63,\\\"weakenTimeInSeconds\\\":6944.54,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"omnia\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":23484.36,\\\"availableMoneyInMillions\\\":939.37,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2375.03,\\\"growTimeInSeconds\\\":7600.11,\\\"weakenTimeInSeconds\\\":9500.13,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"defcomm\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":20458.89,\\\"availableMoneyInMillions\\\":818.36,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2650.05,\\\"growTimeInSeconds\\\":8480.17,\\\"weakenTimeInSeconds\\\":10600.22,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"univ-energy\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":29691.5,\\\"availableMoneyInMillions\\\":1187.66,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":2192.2,\\\"growTimeInSeconds\\\":7015.03,\\\"weakenTimeInSeconds\\\":8768.79,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"solaris\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":18766.56,\\\"availableMoneyInMillions\\\":750.66,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1814.97,\\\"growTimeInSeconds\\\":5807.91,\\\"weakenTimeInSeconds\\\":7259.89,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"zeus-med\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":37083.48,\\\"availableMoneyInMillions\\\":1483.34,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2017.67,\\\"growTimeInSeconds\\\":6456.56,\\\"weakenTimeInSeconds\\\":8070.7,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"taiyang-digital\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":22191.51,\\\"availableMoneyInMillions\\\":887.66,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1862.79,\\\"growTimeInSeconds\\\":5960.92,\\\"weakenTimeInSeconds\\\":7451.15,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"nova-med\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":29390.58,\\\"availableMoneyInMillions\\\":1175.62,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1413.7,\\\"growTimeInSeconds\\\":4523.83,\\\"weakenTimeInSeconds\\\":5654.79,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"infocomm\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":17474.51,\\\"availableMoneyInMillions\\\":698.98,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1860.23,\\\"growTimeInSeconds\\\":5952.72,\\\"weakenTimeInSeconds\\\":7440.91,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"zb-def\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":23742.49,\\\"availableMoneyInMillions\\\":949.7,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1285.54,\\\"growTimeInSeconds\\\":4113.72,\\\"weakenTimeInSeconds\\\":5142.15,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"titan-labs\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":19585.27,\\\"availableMoneyInMillions\\\":783.41,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1789.59,\\\"growTimeInSeconds\\\":5726.67,\\\"weakenTimeInSeconds\\\":7158.34,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"applied-energetics\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":19070.06,\\\"availableMoneyInMillions\\\":762.8,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1857.52,\\\"growTimeInSeconds\\\":5944.07,\\\"weakenTimeInSeconds\\\":7430.09,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"run4theh111z\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":16,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":5.69,\\\"growTimeInSeconds\\\":18.22,\\\"weakenTimeInSeconds\\\":22.77,\\\"maxRAM\\\":512},{\\\"hostName\\\":\\\"helios\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":18400.05,\\\"availableMoneyInMillions\\\":736,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2282.02,\\\"growTimeInSeconds\\\":7302.47,\\\"weakenTimeInSeconds\\\":9128.09,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"vitalife\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":19121.9,\\\"availableMoneyInMillions\\\":764.88,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1966.39,\\\"growTimeInSeconds\\\":6292.44,\\\"weakenTimeInSeconds\\\":7865.55,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"kuai-gong\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":569802.1,\\\"availableMoneyInMillions\\\":22792.08,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3431.97,\\\"growTimeInSeconds\\\":10982.3,\\\"weakenTimeInSeconds\\\":13727.88,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\".\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":21,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":5.69,\\\"growTimeInSeconds\\\":18.22,\\\"weakenTimeInSeconds\\\":22.77,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"b-and-a\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":692239.11,\\\"availableMoneyInMillions\\\":27689.56,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2523.94,\\\"growTimeInSeconds\\\":8076.62,\\\"weakenTimeInSeconds\\\":10095.77,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"powerhouse-fitness\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":22500,\\\"availableMoneyInMillions\\\":900,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1837.17,\\\"growTimeInSeconds\\\":5878.95,\\\"weakenTimeInSeconds\\\":7348.69,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"ecorp\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":993091.55,\\\"availableMoneyInMillions\\\":39723.66,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3696.83,\\\"growTimeInSeconds\\\":11829.86,\\\"weakenTimeInSeconds\\\":14787.32,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"megacorp\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":1042888.83,\\\"availableMoneyInMillions\\\":41715.55,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3138.93,\\\"growTimeInSeconds\\\":10044.59,\\\"weakenTimeInSeconds\\\":12555.73,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"clarkinc\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":615451.81,\\\"availableMoneyInMillions\\\":24618.07,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1443.21,\\\"growTimeInSeconds\\\":4618.28,\\\"weakenTimeInSeconds\\\":5772.85,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"microdyne\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":13264.73,\\\"availableMoneyInMillions\\\":530.59,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1664.7,\\\"growTimeInSeconds\\\":5327.03,\\\"weakenTimeInSeconds\\\":6658.79,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"fulcrumtech\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":36388.62,\\\"availableMoneyInMillions\\\":1455.54,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2889.04,\\\"growTimeInSeconds\\\":9244.94,\\\"weakenTimeInSeconds\\\":11556.17,\\\"maxRAM\\\":2048},{\\\"hostName\\\":\\\"stormtech\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":27725.44,\\\"availableMoneyInMillions\\\":1109.02,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2657.62,\\\"growTimeInSeconds\\\":8504.4,\\\"weakenTimeInSeconds\\\":10630.5,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"omnitek\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":364709.47,\\\"availableMoneyInMillions\\\":14588.38,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2752.63,\\\"growTimeInSeconds\\\":8808.41,\\\"weakenTimeInSeconds\\\":11010.51,\\\"maxRAM\\\":512},{\\\"hostName\\\":\\\"4sigma\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":520608.31,\\\"availableMoneyInMillions\\\":20824.33,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":1633.79,\\\"growTimeInSeconds\\\":5228.12,\\\"weakenTimeInSeconds\\\":6535.16,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"blade\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":482180.52,\\\"availableMoneyInMillions\\\":19287.22,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2641.91,\\\"growTimeInSeconds\\\":8454.13,\\\"weakenTimeInSeconds\\\":10567.66,\\\"maxRAM\\\":256},{\\\"hostName\\\":\\\"nwo\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":641986.48,\\\"availableMoneyInMillions\\\":25679.46,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3099.49,\\\"growTimeInSeconds\\\":9918.35,\\\"weakenTimeInSeconds\\\":12397.94,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"fulcrumassets\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":25,\\\"availableMoneyInMillions\\\":1,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":4012.41,\\\"growTimeInSeconds\\\":12839.71,\\\"weakenTimeInSeconds\\\":16049.63,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"The-Cave\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":5.69,\\\"growTimeInSeconds\\\":18.22,\\\"weakenTimeInSeconds\\\":22.77,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"unitalife\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":27326.37,\\\"availableMoneyInMillions\\\":1093.05,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1836.32,\\\"growTimeInSeconds\\\":5876.22,\\\"weakenTimeInSeconds\\\":7345.28,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"joesguns\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":85,\\\"maxMoneyInMillions\\\":62.5,\\\"availableMoneyInMillions\\\":2.5,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":9.96,\\\"growTimeInSeconds\\\":31.88,\\\"weakenTimeInSeconds\\\":39.85,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"hong-fang-tea\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":82,\\\"maxMoneyInMillions\\\":75,\\\"availableMoneyInMillions\\\":3,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":18.5,\\\"growTimeInSeconds\\\":59.2,\\\"weakenTimeInSeconds\\\":74,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"harakiri-sushi\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":90,\\\"maxMoneyInMillions\\\":100,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":11.38,\\\"growTimeInSeconds\\\":36.43,\\\"weakenTimeInSeconds\\\":45.54,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"CSEC\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":92,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":5.69,\\\"growTimeInSeconds\\\":18.22,\\\"weakenTimeInSeconds\\\":22.77,\\\"maxRAM\\\":8},{\\\"hostName\\\":\\\"iron-gym\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":60,\\\"maxMoneyInMillions\\\":500,\\\"availableMoneyInMillions\\\":20,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":91.08,\\\"growTimeInSeconds\\\":291.44,\\\"weakenTimeInSeconds\\\":364.3,\\\"maxRAM\\\":32}]\"}}],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"70.7.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-746436-Sector-12.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8992914502\",37],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"70.7.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"70.7.8.2\",\"moduleSequenceNumber\":213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"70.7.8.2\",\"moduleSequenceNumber\":214}}],\"serversOnNetwork\":[\"38.1.7.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":39723661986,\"moneyMax\":993091549650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1310,\"serverGrowth\":99}},\"31.7.0.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-733557.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,8,3,3,1,9,0,7,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"31.7.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"31.7.0.0\",\"moduleSequenceNumber\":215}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"31.7.0.0\",\"moduleSequenceNumber\":216}}],\"serversOnNetwork\":[\"38.1.7.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":41715553014,\"moneyMax\":1042888825350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1112,\"serverGrowth\":99}},\"38.1.7.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"38.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"38.1.7.4\",\"moduleSequenceNumber\":217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"38.1.7.4\",\"moduleSequenceNumber\":218}}],\"serversOnNetwork\":[\"53.5.6.0\",\"70.7.8.2\",\"31.7.0.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":27689564495,\"moneyMax\":692239112375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1106,\"serverGrowth\":71}},\"67.1.1.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"67.1.1.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":254.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[365886030,530,1590,1802]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67631.30190000003,\"onlineMoneyMade\":365886030,\"onlineRunningTime\":20088.61000003828,\"pid\":132,\"ramUsage\":2.4,\"server\":\"67.1.1.1\",\"threads\":106}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"67.1.1.1\",\"moduleSequenceNumber\":219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"67.1.1.1\",\"moduleSequenceNumber\":220}}],\"serversOnNetwork\":[\"83.3.3.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":19287220818,\"moneyMax\":482180520450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":975,\"serverGrowth\":73}},\"96.2.4.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"96.2.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"96.2.4.9\",\"moduleSequenceNumber\":221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"96.2.4.9\",\"moduleSequenceNumber\":222}}],\"serversOnNetwork\":[\"83.3.3.6\",\"16.7.2.2\",\"73.1.7.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25679459262,\"moneyMax\":641986481550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1098,\"serverGrowth\":86}},\"55.5.9.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"55.5.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"55.5.9.8\",\"moduleSequenceNumber\":223}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"55.5.9.8\",\"moduleSequenceNumber\":224}}],\"serversOnNetwork\":[\"98.7.8.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":24618072529,\"moneyMax\":615451813225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1098,\"serverGrowth\":61}},\"83.3.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"83.3.3.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":511.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[1239469578,639,3621,3621]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":135023.8566599999,\"onlineMoneyMade\":1239469578,\"onlineRunningTime\":20093.010000038295,\"pid\":131,\"ramUsage\":2.4,\"server\":\"83.3.3.6\",\"threads\":213}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"83.3.3.6\",\"moduleSequenceNumber\":225}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"83.3.3.6\",\"moduleSequenceNumber\":226}}],\"serversOnNetwork\":[\"9.5.5.5\",\"67.1.1.1\",\"96.2.4.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":14588378620,\"moneyMax\":364709465500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":995,\"serverGrowth\":95}},\"71.6.6.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-546783-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,9],[21,22],[17,18],[18,28],[12,14],[1,9],[9,14],[6,13],[3,11],[2,6],[9,11],[12,17],[20,25],[25,30],[7,8],[7,11]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"71.6.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"71.6.6.8\",\"moduleSequenceNumber\":227}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"71.6.6.8\",\"moduleSequenceNumber\":228}}],\"serversOnNetwork\":[\"9.5.5.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":20824332415,\"moneyMax\":520608310375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":908,\"serverGrowth\":78}},\"98.7.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374580.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[104,76,59,42,20,5,73],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"98.7.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"98.7.8.6\",\"moduleSequenceNumber\":229}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"98.7.8.6\",\"moduleSequenceNumber\":230}}],\"serversOnNetwork\":[\"83.8.1.9\",\"55.5.9.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":22792084053,\"moneyMax\":569802101325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1254,\"serverGrowth\":96}},\"63.9.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"63.9.7.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2047.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[8177357005,5118,11942,16207]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":558285.4889099998,\"onlineMoneyMade\":8177357005,\"onlineRunningTime\":20097.21000003831,\"pid\":130,\"ramUsage\":2.4,\"server\":\"63.9.7.3\",\"threads\":853}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"63.9.7.3\",\"moduleSequenceNumber\":231}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"63.9.7.3\",\"moduleSequenceNumber\":232}}],\"serversOnNetwork\":[\"72.6.6.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1455544662,\"moneyMax\":36388616550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1178,\"serverGrowth\":92}},\"16.7.2.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"16.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"16.7.2.2\",\"moduleSequenceNumber\":233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"16.7.2.2\",\"moduleSequenceNumber\":234}}],\"serversOnNetwork\":[\"96.2.4.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1422,\"serverGrowth\":1}},\"9.5.5.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"9.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"9.5.5.5\",\"moduleSequenceNumber\":235}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"9.5.5.5\",\"moduleSequenceNumber\":236}}],\"serversOnNetwork\":[\"72.6.6.0\",\"83.3.3.6\",\"71.6.6.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1109017506,\"moneyMax\":27725437650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1071,\"serverGrowth\":85}},\"20.9.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"20.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"20.9.0.4\",\"moduleSequenceNumber\":237}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"20.9.0.4\",\"moduleSequenceNumber\":238}}],\"serversOnNetwork\":[\"12.9.1.7\",\"41.3.1.5\",\"37.0.6.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":818355731,\"moneyMax\":20458893275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1021,\"serverGrowth\":49}},\"41.3.1.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"41.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"41.3.1.5\",\"moduleSequenceNumber\":239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"41.3.1.5\",\"moduleSequenceNumber\":240}}],\"serversOnNetwork\":[\"20.9.0.4\",\"72.6.6.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":698980371,\"moneyMax\":17474509275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":905,\"serverGrowth\":41}},\"83.8.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-162381-NiteSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":82,\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"83.8.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[215843745,91,221,208]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8829.52785000001,\"onlineMoneyMade\":215843745,\"onlineRunningTime\":20118.81000003839,\"pid\":125,\"ramUsage\":2.4,\"server\":\"83.8.1.9\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"83.8.1.9\",\"moduleSequenceNumber\":241}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"83.8.1.9\",\"moduleSequenceNumber\":242}}],\"serversOnNetwork\":[\"34.8.1.5\",\"98.7.8.6\",\"53.5.6.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":736001854,\"moneyMax\":18400046350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":860,\"serverGrowth\":78}},\"35.1.2.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-671261-TianDiHui.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))aa()()a)\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"35.1.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[76935092,104,390,416]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15839.63784000001,\"onlineMoneyMade\":76935092,\"onlineRunningTime\":20115.410000038377,\"pid\":126,\"ramUsage\":2.4,\"server\":\"35.1.2.9\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"35.1.2.9\",\"moduleSequenceNumber\":243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"35.1.2.9\",\"moduleSequenceNumber\":244}}],\"serversOnNetwork\":[\"34.8.1.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":764875809,\"moneyMax\":19121895225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":830,\"serverGrowth\":75}},\"46.9.8.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"46.9.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"46.9.8.8\",\"moduleSequenceNumber\":245}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"46.9.8.8\",\"moduleSequenceNumber\":246}}],\"serversOnNetwork\":[\"79.9.4.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":921588105,\"moneyMax\":23039702625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":865,\"serverGrowth\":87}},\"88.4.9.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"88.4.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[22061670,12,84,114]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3605.9050800000027,\"onlineMoneyMade\":22061670,\"onlineRunningTime\":20138.01000003846,\"pid\":121,\"ramUsage\":2.4,\"server\":\"88.4.9.7\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"88.4.9.7\",\"moduleSequenceNumber\":247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"88.4.9.7\",\"moduleSequenceNumber\":248}}],\"serversOnNetwork\":[\"12.9.1.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1187659922,\"moneyMax\":29691498050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":873,\"serverGrowth\":85}},\"73.9.1.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"73.9.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[75952708,52,195,221]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8080.355790000005,\"onlineMoneyMade\":75952708,\"onlineRunningTime\":20126.410000038417,\"pid\":123,\"ramUsage\":2.4,\"server\":\"73.9.1.8\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"73.9.1.8\",\"moduleSequenceNumber\":249}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"73.9.1.8\",\"moduleSequenceNumber\":250}}],\"serversOnNetwork\":[\"37.0.6.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":783410807,\"moneyMax\":19585270175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":814,\"serverGrowth\":61}},\"72.6.6.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"72.6.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[29117478,26,221,221]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8080.355790000006,\"onlineMoneyMade\":29117478,\"onlineRunningTime\":20100.610000038323,\"pid\":129,\"ramUsage\":2.4,\"server\":\"72.6.6.0\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"72.6.6.0\",\"moduleSequenceNumber\":251}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"72.6.6.0\",\"moduleSequenceNumber\":252}}],\"serversOnNetwork\":[\"41.3.1.5\",\"63.9.7.3\",\"9.5.5.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":530589399,\"moneyMax\":13264734975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":870,\"serverGrowth\":80}},\"39.2.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"39.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"39.2.6.6\",\"moduleSequenceNumber\":253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"39.2.6.6\",\"moduleSequenceNumber\":254}}],\"serversOnNetwork\":[\"53.1.0.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":887660578,\"moneyMax\":22191514450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":870,\"serverGrowth\":80}},\"35.7.0.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112402.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":51602977,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"35.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"35.7.0.6\",\"moduleSequenceNumber\":255}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"35.7.0.6\",\"moduleSequenceNumber\":256}}],\"serversOnNetwork\":[\"1.7.9.4\",\"4.6.0.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":782041563,\"moneyMax\":19551039075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":853,\"serverGrowth\":74}},\"30.2.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"30.2.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"30.2.7.3\",\"moduleSequenceNumber\":257}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"30.2.7.3\",\"moduleSequenceNumber\":258}}],\"serversOnNetwork\":[\"1.7.9.4\",\"12.9.1.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1052887837,\"moneyMax\":26322195925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":916,\"serverGrowth\":62}},\"12.9.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"12.9.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[97376175,65,182,234]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8240.892660000007,\"onlineMoneyMade\":97376175,\"onlineRunningTime\":20142.410000038475,\"pid\":120,\"ramUsage\":2.4,\"server\":\"12.9.1.7\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"12.9.1.7\",\"moduleSequenceNumber\":259}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"12.9.1.7\",\"moduleSequenceNumber\":260}}],\"serversOnNetwork\":[\"30.2.7.3\",\"20.9.0.4\",\"88.4.9.7\",\"53.1.0.1\",\"31.3.4.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":939374406,\"moneyMax\":23484360150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":946,\"serverGrowth\":60}},\"37.0.6.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"37.0.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"37.0.6.2\",\"moduleSequenceNumber\":261}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"37.0.6.2\",\"moduleSequenceNumber\":262}}],\"serversOnNetwork\":[\"20.9.0.4\",\"73.9.1.8\",\"34.8.1.5\",\"94.6.9.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":949699453,\"moneyMax\":23742486325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":803,\"serverGrowth\":68}},\"34.8.1.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"34.8.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"34.8.1.5\",\"moduleSequenceNumber\":263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"34.8.1.5\",\"moduleSequenceNumber\":264}}],\"serversOnNetwork\":[\"37.0.6.2\",\"83.8.1.9\",\"35.1.2.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":762802224,\"moneyMax\":19070055600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":845,\"serverGrowth\":72}},\"53.1.0.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"53.1.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[54756546,26,221,208]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7919.818920000003,\"onlineMoneyMade\":54756546,\"onlineRunningTime\":20134.610000038447,\"pid\":122,\"ramUsage\":2.4,\"server\":\"53.1.0.1\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"53.1.0.1\",\"moduleSequenceNumber\":265}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"53.1.0.1\",\"moduleSequenceNumber\":266}}],\"serversOnNetwork\":[\"12.9.1.7\",\"39.2.6.6\",\"92.3.7.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":750662537,\"moneyMax\":18766563425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":815,\"serverGrowth\":73}},\"79.9.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"79.9.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"79.9.4.6\",\"moduleSequenceNumber\":267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"79.9.4.6\",\"moduleSequenceNumber\":268}}],\"serversOnNetwork\":[\"85.6.4.5\",\"46.9.8.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1601737911,\"moneyMax\":40043447775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":881,\"serverGrowth\":66}},\"17.0.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-345629.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,2,-5,-2,-10,-5,-1,2,9,-7,0,7,0,-8,8,-10,-9,-10,4,1,-9,9,-10,1,-7,2,4,-4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"17.0.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[127201620,130,364,468]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16481.785320000017,\"onlineMoneyMade\":127201620,\"onlineRunningTime\":20145.610000038487,\"pid\":119,\"ramUsage\":2.4,\"server\":\"17.0.1.6\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"17.0.1.6\",\"moduleSequenceNumber\":269}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"17.0.1.6\",\"moduleSequenceNumber\":270}}],\"serversOnNetwork\":[\"1.7.9.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1535031049,\"moneyMax\":38375776225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":800,\"serverGrowth\":80}},\"92.3.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"92.3.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"92.3.7.5\",\"moduleSequenceNumber\":271}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"92.3.7.5\",\"moduleSequenceNumber\":272}}],\"serversOnNetwork\":[\"53.1.0.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1175623257,\"moneyMax\":29390581425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":811,\"serverGrowth\":70}},\"31.3.4.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-474356-CentralIntelligenceAgency.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,0,0,4,9,6,0,0,0,5,10,8,9,8,0,0,4,0,0,0],\"reward\":{\"name\":\"Central Intelligence Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"31.3.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"31.3.4.9\",\"moduleSequenceNumber\":273}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"31.3.4.9\",\"moduleSequenceNumber\":274}}],\"serversOnNetwork\":[\"12.9.1.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1483339211,\"moneyMax\":37083480275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":822,\"serverGrowth\":75}},\"4.6.0.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"4.6.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[44714268,30,96,102]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3852.884880000003,\"onlineMoneyMade\":44714268,\"onlineRunningTime\":20082.410000038257,\"pid\":133,\"ramUsage\":2.4,\"server\":\"4.6.0.0\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4.6.0.0\",\"moduleSequenceNumber\":275}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4.6.0.0\",\"moduleSequenceNumber\":276}}],\"serversOnNetwork\":[\"35.7.0.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1093054821,\"moneyMax\":27326370525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":804,\"serverGrowth\":79}},\"22.6.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"22.6.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[92199630,36,90,108]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3951.676800000003,\"onlineMoneyMade\":92199630,\"onlineRunningTime\":20190.61000003865,\"pid\":107,\"ramUsage\":2.4,\"server\":\"22.6.5.2\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"22.6.5.2\",\"moduleSequenceNumber\":277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"22.6.5.2\",\"moduleSequenceNumber\":278}}],\"serversOnNetwork\":[\"23.9.6.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":727846397,\"moneyMax\":18196159925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":674,\"serverGrowth\":64}},\"98.4.3.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-607839.cct\",\"type\":\"Total Ways to Sum\",\"data\":81,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"98.4.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[223931279,104,234,195]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9097.089300000009,\"onlineMoneyMade\":223931279,\"onlineRunningTime\":20187.210000038638,\"pid\":108,\"ramUsage\":2.4,\"server\":\"98.4.3.1\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"98.4.3.1\",\"moduleSequenceNumber\":279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"98.4.3.1\",\"moduleSequenceNumber\":280}}],\"serversOnNetwork\":[\"23.9.6.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":532540430,\"moneyMax\":13313510750,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":492,\"serverGrowth\":59}},\"1.7.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"1.7.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[1602211,26,156,247]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7331.183730000004,\"onlineMoneyMade\":1602211,\"onlineRunningTime\":20157.41000003853,\"pid\":117,\"ramUsage\":2.4,\"server\":\"1.7.9.4\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"1.7.9.4\",\"moduleSequenceNumber\":281}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"1.7.9.4\",\"moduleSequenceNumber\":282}}],\"serversOnNetwork\":[\"64.7.6.7\",\"35.7.0.6\",\"30.2.7.3\",\"17.0.1.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":627108655,\"moneyMax\":15677716375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":559,\"serverGrowth\":53}},\"65.2.5.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"65.2.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[147727450,78,182,234]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8401.429530000007,\"onlineMoneyMade\":147727450,\"onlineRunningTime\":20154.010000038517,\"pid\":118,\"ramUsage\":2.4,\"server\":\"65.2.5.9\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"65.2.5.9\",\"moduleSequenceNumber\":283}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"65.2.5.9\",\"moduleSequenceNumber\":284}}],\"serversOnNetwork\":[\"64.7.6.7\",\"85.6.4.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":212461911,\"moneyMax\":5311547775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":402,\"serverGrowth\":49}},\"87.8.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290532.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,19],[13,17],[14,22],[11,15],[19,24],[19,20],[8,9],[11,17],[1,2],[20,28],[14,20],[19,25],[24,27],[20,30],[25,31],[7,15],[18,22],[9,17],[1,10],[11,20]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"87.8.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[102449724,130,520,390]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17337.98196000002,\"onlineMoneyMade\":102449724,\"onlineRunningTime\":20210.21000003872,\"pid\":102,\"ramUsage\":2.4,\"server\":\"87.8.4.1\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"87.8.4.1\",\"moduleSequenceNumber\":285}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"87.8.4.1\",\"moduleSequenceNumber\":286}}],\"serversOnNetwork\":[\"87.7.9.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":239265342,\"moneyMax\":5981633550,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":410,\"serverGrowth\":44}},\"96.8.6.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"96.8.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[970479146,338,390,442]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20120.621040000024,\"onlineMoneyMade\":970479146,\"onlineRunningTime\":20197.210000038674,\"pid\":105,\"ramUsage\":2.4,\"server\":\"96.8.6.4\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"96.8.6.4\",\"moduleSequenceNumber\":287}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"96.8.6.4\",\"moduleSequenceNumber\":288}}],\"serversOnNetwork\":[\"97.2.0.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1003923651,\"moneyMax\":25098091275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":768,\"serverGrowth\":78}},\"64.7.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-667468.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"64.7.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[64822992,52,442,442]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15732.613260000013,\"onlineMoneyMade\":64822992,\"onlineRunningTime\":20164.010000038554,\"pid\":115,\"ramUsage\":2.4,\"server\":\"64.7.6.7\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"64.7.6.7\",\"moduleSequenceNumber\":289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"64.7.6.7\",\"moduleSequenceNumber\":290}}],\"serversOnNetwork\":[\"42.8.9.2\",\"1.7.9.4\",\"65.2.5.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":321949190,\"moneyMax\":8048729750,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":444,\"serverGrowth\":60}},\"66.4.4.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"66.4.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"66.4.4.8\",\"moduleSequenceNumber\":291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"66.4.4.8\",\"moduleSequenceNumber\":292}}],\"serversOnNetwork\":[\"87.7.9.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":401056118,\"moneyMax\":10026402950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":633,\"serverGrowth\":66}},\"90.9.5.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"90.9.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[131061541,91,195,221]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8561.966400000007,\"onlineMoneyMade\":131061541,\"onlineRunningTime\":20160.61000003854,\"pid\":116,\"ramUsage\":2.4,\"server\":\"90.9.5.1\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"90.9.5.1\",\"moduleSequenceNumber\":293}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"90.9.5.1\",\"moduleSequenceNumber\":294}}],\"serversOnNetwork\":[\"42.8.9.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":322629647,\"moneyMax\":8065741175,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":429,\"serverGrowth\":41}},\"74.3.3.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-887018.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[125,7,147,152,13,109,169,58,124,172,169,159,106,49,168,105,120,200,7,56,183,1,155,194,193,77,54,36,24,51,14,73,12,181,100,93,184,62,133,176,16,20,79,54,139,160,31,51,193,123],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"74.3.3.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[20467383,6,45,57]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1852.3485000000014,\"onlineMoneyMade\":20467383,\"onlineRunningTime\":20206.010000038706,\"pid\":103,\"ramUsage\":2.4,\"server\":\"74.3.3.9\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"74.3.3.9\",\"moduleSequenceNumber\":295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"74.3.3.9\",\"moduleSequenceNumber\":296}}],\"serversOnNetwork\":[\"48.4.4.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":860899472.3182114,\"moneyMax\":4668077375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":282,\"serverGrowth\":51}},\"28.2.0.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-188192-CentralIntelligenceAgency.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,9,5,8,3,2,5,6,0,3,0,5,5,7,0,0,8,9,0,6,8],\"reward\":{\"name\":\"Central Intelligence Agency\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-830568.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()(()(((((((()())(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-403844.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,27],[25,34],[17,24],[23,32],[4,6],[2,7],[8,17],[10,12],[1,2],[6,13],[17,24],[12,22]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"28.2.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"28.2.0.3\",\"moduleSequenceNumber\":297}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"28.2.0.3\",\"moduleSequenceNumber\":298}}],\"serversOnNetwork\":[\"48.4.4.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":247445096,\"moneyMax\":6186127400,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":311,\"serverGrowth\":53}},\"79.2.9.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"79.2.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[117695162,52,169,234]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7973.331210000006,\"onlineMoneyMade\":117695162,\"onlineRunningTime\":20201.61000003869,\"pid\":104,\"ramUsage\":2.4,\"server\":\"79.2.9.7\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"79.2.9.7\",\"moduleSequenceNumber\":299}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"79.2.9.7\",\"moduleSequenceNumber\":300}}],\"serversOnNetwork\":[\"48.4.4.1\",\"23.9.6.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":393,\"serverGrowth\":48}},\"87.7.9.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"87.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"87.7.9.8\",\"moduleSequenceNumber\":301}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"87.7.9.8\",\"moduleSequenceNumber\":302}}],\"serversOnNetwork\":[\"77.2.5.4\",\"87.8.4.1\",\"66.4.4.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":82511901,\"moneyMax\":2062797525,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":273,\"serverGrowth\":43}},\"10.3.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"10.3.6.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[3998784,4,15,17]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":621.5658300000002,\"onlineMoneyMade\":3998784,\"onlineRunningTime\":20231.210000038798,\"pid\":96,\"ramUsage\":2.4,\"server\":\"10.3.6.6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"10.3.6.6\",\"moduleSequenceNumber\":303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"10.3.6.6\",\"moduleSequenceNumber\":304}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.06,\"minDifficulty\":1,\"moneyAvailable\":1580950,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"89.6.4.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"89.6.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[8886486,12,114,96]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3778.7909400000026,\"onlineMoneyMade\":8886486,\"onlineRunningTime\":20228.010000038787,\"pid\":97,\"ramUsage\":2.4,\"server\":\"89.6.4.8\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"89.6.4.8\",\"moduleSequenceNumber\":305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"89.6.4.8\",\"moduleSequenceNumber\":306}}],\"serversOnNetwork\":[\"0.2.0.6\",\"98.5.1.9\",\"73.7.0.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":4.9639999999999995,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"42.9.0.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"42.9.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[56193468,30,102,102]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3951.676800000003,\"onlineMoneyMade\":56193468,\"onlineRunningTime\":20180.610000038614,\"pid\":110,\"ramUsage\":2.4,\"server\":\"42.9.0.1\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"42.9.0.1\",\"moduleSequenceNumber\":307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"42.9.0.1\",\"moduleSequenceNumber\":308}}],\"serversOnNetwork\":[\"0.2.0.6\",\"64.4.2.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"11.8.7.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"11.8.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[17629464,24,108,102]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3976.3747800000033,\"onlineMoneyMade\":17629464,\"onlineRunningTime\":20079.210000038245,\"pid\":134,\"ramUsage\":2.4,\"server\":\"11.8.7.4\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"11.8.7.4\",\"moduleSequenceNumber\":309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"11.8.7.4\",\"moduleSequenceNumber\":310}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"98.5.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"98.5.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[40853696,26,260,195]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8187.380370000006,\"onlineMoneyMade\":40853696,\"onlineRunningTime\":20224.610000038774,\"pid\":98,\"ramUsage\":2.4,\"server\":\"98.5.1.9\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"98.5.1.9\",\"moduleSequenceNumber\":311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"98.5.1.9\",\"moduleSequenceNumber\":312}}],\"serversOnNetwork\":[\"89.6.4.8\",\"48.4.4.1\",\"77.2.5.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"73.7.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"73.7.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[10081938,18,102,102]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3754.0929600000027,\"onlineMoneyMade\":10081938,\"onlineRunningTime\":20221.21000003876,\"pid\":99,\"ramUsage\":2.4,\"server\":\"73.7.0.7\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"73.7.0.7\",\"moduleSequenceNumber\":313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"73.7.0.7\",\"moduleSequenceNumber\":314}}],\"serversOnNetwork\":[\"89.6.4.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"85.1.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"85.1.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[101626876,78,182,208]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8133.868080000006,\"onlineMoneyMade\":101626876,\"onlineRunningTime\":20174.01000003859,\"pid\":112,\"ramUsage\":2.4,\"server\":\"85.1.8.6\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"85.1.8.6\",\"moduleSequenceNumber\":315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"85.1.8.6\",\"moduleSequenceNumber\":316}}],\"serversOnNetwork\":[\"64.4.2.7\",\"42.8.9.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"48.4.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"48.4.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[58042270,104,442,442]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16802.859060000017,\"onlineMoneyMade\":58042270,\"onlineRunningTime\":20218.01000003875,\"pid\":100,\"ramUsage\":2.4,\"server\":\"48.4.4.1\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"48.4.4.1\",\"moduleSequenceNumber\":317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"48.4.4.1\",\"moduleSequenceNumber\":318}}],\"serversOnNetwork\":[\"98.5.1.9\",\"74.3.3.9\",\"28.2.0.3\",\"79.2.9.7\",\"97.2.0.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":61.53799999999999,\"minDifficulty\":10,\"moneyAvailable\":123212.77162667543,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"75.8.2.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"75.8.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[33678720,12,84,108]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3531.811140000002,\"onlineMoneyMade\":33678720,\"onlineRunningTime\":20075.810000038233,\"pid\":135,\"ramUsage\":2.4,\"server\":\"75.8.2.1\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"75.8.2.1\",\"moduleSequenceNumber\":319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"75.8.2.1\",\"moduleSequenceNumber\":320}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"53.5.2.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"53.5.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[14822238,18,90,108]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3704.697000000003,\"onlineMoneyMade\":14822238,\"onlineRunningTime\":20072.61000003822,\"pid\":136,\"ramUsage\":2.4,\"server\":\"53.5.2.2\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"53.5.2.2\",\"moduleSequenceNumber\":321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"53.5.2.2\",\"moduleSequenceNumber\":322}}],\"serversOnNetwork\":[\"0.2.0.6\",\"12.7.9.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"77.2.5.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-174606.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[191,104,77,28,73,104,63,14,52,68,37,38,49,94,128,86,86,119,143,22,137,35,160,64,14,29,42,133,175,130,82,158,144,145,169,93,18,150,115],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106653-CentralIntelligenceAgency.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":549749959,\"reward\":{\"name\":\"Central Intelligence Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"77.2.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[24366628,39,182,234]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7705.7697600000065,\"onlineMoneyMade\":24366628,\"onlineRunningTime\":20214.610000038738,\"pid\":101,\"ramUsage\":2.4,\"server\":\"77.2.5.4\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"77.2.5.4\",\"moduleSequenceNumber\":323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"77.2.5.4\",\"moduleSequenceNumber\":324}}],\"serversOnNetwork\":[\"98.5.1.9\",\"87.7.9.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"64.4.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"64.4.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[200326906,104,182,247]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8883.04014000001,\"onlineMoneyMade\":200326906,\"onlineRunningTime\":20177.2100000386,\"pid\":111,\"ramUsage\":2.4,\"server\":\"64.4.2.7\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"64.4.2.7\",\"moduleSequenceNumber\":325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"64.4.2.7\",\"moduleSequenceNumber\":326}}],\"serversOnNetwork\":[\"42.9.0.1\",\"85.1.8.6\",\"55.8.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.148,\"minDifficulty\":5,\"moneyAvailable\":3200695.6129187644,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"55.8.4.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-632026.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-469120-TianDiHui.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":610509053,\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"55.8.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[90136553,26,221,221]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8026.843500000005,\"onlineMoneyMade\":90136553,\"onlineRunningTime\":20170.610000038578,\"pid\":113,\"ramUsage\":2.4,\"server\":\"55.8.4.0\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"55.8.4.0\",\"moduleSequenceNumber\":327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"55.8.4.0\",\"moduleSequenceNumber\":328}}],\"serversOnNetwork\":[\"64.4.2.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":59.25399999999998,\"minDifficulty\":9,\"moneyAvailable\":591590.5901460578,\"moneyMax\":1617863900,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":182,\"serverGrowth\":40}},\"97.2.0.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"97.2.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"97.2.0.0\",\"moduleSequenceNumber\":329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"97.2.0.0\",\"moduleSequenceNumber\":330}}],\"serversOnNetwork\":[\"48.4.4.1\",\"96.8.6.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":50698523,\"moneyMax\":1267463075,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":273,\"serverGrowth\":33}},\"29.2.5.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-529316.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[102,160,42,25,10,60,1,75,169,110,78,94,16,67,188,126,163,104,186,82,147,72,25,90,115,76,56,200,171,92,17,87,179,163,176,80,72,94,63,171,95,43,158,61,152],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"29.2.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[39063518,39,221,195]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7759.282050000007,\"onlineMoneyMade\":39063518,\"onlineRunningTime\":20066.010000038197,\"pid\":138,\"ramUsage\":2.4,\"server\":\"29.2.5.5\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"29.2.5.5\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"29.2.5.5\",\"moduleSequenceNumber\":332}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"42.9.2.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"42.9.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[266358222,156,468,442]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17766.08028000002,\"onlineMoneyMade\":266358222,\"onlineRunningTime\":20183.810000038626,\"pid\":109,\"ramUsage\":2.4,\"server\":\"42.9.2.2\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"42.9.2.2\",\"moduleSequenceNumber\":333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"42.9.2.2\",\"moduleSequenceNumber\":334}}],\"serversOnNetwork\":[\"23.9.6.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":499,\"serverGrowth\":29}},\"15.9.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"15.9.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[82157504,52,221,208]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8187.38037000001,\"onlineMoneyMade\":82157504,\"onlineRunningTime\":20106.810000038346,\"pid\":128,\"ramUsage\":2.4,\"server\":\"15.9.7.5\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"15.9.7.5\",\"moduleSequenceNumber\":335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"15.9.7.5\",\"moduleSequenceNumber\":336}}],\"serversOnNetwork\":[\"53.5.6.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":990,\"serverGrowth\":59}},\"85.6.4.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"85.6.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"85.6.4.5\",\"moduleSequenceNumber\":337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"85.6.4.5\",\"moduleSequenceNumber\":338}}],\"serversOnNetwork\":[\"65.2.5.9\",\"79.9.4.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":780,\"serverGrowth\":45}},\"94.6.9.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"94.6.9.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":511.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[247063173,852,3408,3408]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":131516.7434999999,\"onlineMoneyMade\":247063173,\"onlineRunningTime\":20122.0100000384,\"pid\":124,\"ramUsage\":2.4,\"server\":\"94.6.9.6\",\"threads\":213}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"94.6.9.6\",\"moduleSequenceNumber\":339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"94.6.9.6\",\"moduleSequenceNumber\":340}}],\"serversOnNetwork\":[\"37.0.6.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":537,\"serverGrowth\":0}},\"23.9.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"23.9.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[400346153,212,848,1007]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34688.312910000015,\"onlineMoneyMade\":400346153,\"onlineRunningTime\":20193.810000038662,\"pid\":106,\"ramUsage\":2.4,\"server\":\"23.9.6.7\",\"threads\":53}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"23.9.6.7\",\"moduleSequenceNumber\":341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"23.9.6.7\",\"moduleSequenceNumber\":342}}],\"serversOnNetwork\":[\"79.2.9.7\",\"22.6.5.2\",\"98.4.3.1\",\"42.9.2.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":342,\"serverGrowth\":0}},\"42.8.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-612131-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,4],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"42.8.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[342454866,130,468,416]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17123.932800000017,\"onlineMoneyMade\":342454866,\"onlineRunningTime\":20167.210000038565,\"pid\":114,\"ramUsage\":2.4,\"server\":\"42.8.9.2\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"42.8.9.2\",\"moduleSequenceNumber\":343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"42.8.9.2\",\"moduleSequenceNumber\":344}}],\"serversOnNetwork\":[\"85.1.8.6\",\"64.7.6.7\",\"90.9.5.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":217,\"serverGrowth\":0}},\"53.5.6.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-313108-Aevum.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,7,6,4,0,6],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"53.5.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[46883634,30,96,90]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3704.697000000003,\"onlineMoneyMade\":46883634,\"onlineRunningTime\":20111.21000003836,\"pid\":127,\"ramUsage\":2.4,\"server\":\"53.5.6.0\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"53.5.6.0\",\"moduleSequenceNumber\":345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"53.5.6.0\",\"moduleSequenceNumber\":346}}],\"serversOnNetwork\":[\"83.8.1.9\",\"38.1.7.4\",\"15.9.7.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"12.7.9.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"12.7.9.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[12358251,9,48,51]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1852.3485000000012,\"onlineMoneyMade\":12358251,\"onlineRunningTime\":20069.21000003821,\"pid\":137,\"ramUsage\":2.4,\"server\":\"12.7.9.6\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"12.7.9.6\",\"moduleSequenceNumber\":347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"12.7.9.6\",\"moduleSequenceNumber\":348}}],\"serversOnNetwork\":[\"53.5.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":58,\"serverGrowth\":0}},\"73.1.7.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-700684-CentralIntelligenceAgency.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[3,163,50,126,116,53,177,7,150,131,144,199,158,44,102,10,79,72,10,3,131,145,28,69,200,80,167,109,195,163],\"reward\":{\"name\":\"Central Intelligence Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"73.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"73.1.7.4\",\"moduleSequenceNumber\":349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"73.1.7.4\",\"moduleSequenceNumber\":350}}],\"serversOnNetwork\":[\"96.2.4.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"0.2.8.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"0.2.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"79.1.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"79.1.1.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"54.9.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"54.9.5.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[7065793194,2982,6816,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":294597.50543999986,\"onlineMoneyMade\":7065793194,\"onlineRunningTime\":20304.810000039066,\"pid\":71,\"ramUsage\":2.4,\"server\":\"54.9.5.2\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"54.9.5.2\",\"moduleSequenceNumber\":351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"54.9.5.2\",\"moduleSequenceNumber\":352}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"4.8.2.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0-0\",\"httpPortOpen\":false,\"ip\":\"4.8.2.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[1370347854,852,7242,8094]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":273554.8264799998,\"onlineMoneyMade\":1370347854,\"onlineRunningTime\":20301.810000039055,\"pid\":72,\"ramUsage\":2.4,\"server\":\"4.8.2.4\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4.8.2.4\",\"moduleSequenceNumber\":353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4.8.2.4\",\"moduleSequenceNumber\":354}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"30.7.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"30.7.4.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[8687522370,2130,6816,8094]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287583.2791199998,\"onlineMoneyMade\":8687522370,\"onlineRunningTime\":20299.010000039045,\"pid\":73,\"ramUsage\":2.4,\"server\":\"30.7.4.1\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"30.7.4.1\",\"moduleSequenceNumber\":355}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"30.7.4.1\",\"moduleSequenceNumber\":356}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"18.1.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"18.1.7.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[5911422228,2130,7668,7242]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287583.2791199998,\"onlineMoneyMade\":5911422228,\"onlineRunningTime\":20296.010000039034,\"pid\":74,\"ramUsage\":2.4,\"server\":\"18.1.7.3\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"18.1.7.3\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"18.1.7.3\",\"moduleSequenceNumber\":358}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"46.0.9.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"46.0.9.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[3633326310,1704,8520,6816]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291090.3922799999,\"onlineMoneyMade\":3633326310,\"onlineRunningTime\":20293.210000039024,\"pid\":75,\"ramUsage\":2.4,\"server\":\"46.0.9.8\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"46.0.9.8\",\"moduleSequenceNumber\":359}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"46.0.9.8\",\"moduleSequenceNumber\":360}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"39.0.7.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"39.0.7.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[3531890598,2130,8094,7242]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":294597.50543999986,\"onlineMoneyMade\":3531890598,\"onlineRunningTime\":20290.210000039013,\"pid\":76,\"ramUsage\":2.4,\"server\":\"39.0.7.4\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"39.0.7.4\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"39.0.7.4\",\"moduleSequenceNumber\":362}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"87.9.8.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"87.9.8.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[3973540134,2556,6816,6816]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":275308.38305999985,\"onlineMoneyMade\":3973540134,\"onlineRunningTime\":20287.410000039003,\"pid\":77,\"ramUsage\":2.4,\"server\":\"87.9.8.3\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"87.9.8.3\",\"moduleSequenceNumber\":363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"87.9.8.3\",\"moduleSequenceNumber\":364}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"48.4.0.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"48.4.0.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[4054408992,1704,8520,5964]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":270047.7133199998,\"onlineMoneyMade\":4054408992,\"onlineRunningTime\":20284.41000003899,\"pid\":78,\"ramUsage\":2.4,\"server\":\"48.4.0.0\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"48.4.0.0\",\"moduleSequenceNumber\":365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"48.4.0.0\",\"moduleSequenceNumber\":366}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"17.1.2.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"17.1.2.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[11202202074,4686,6816,7242]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":322654.4107199999,\"onlineMoneyMade\":11202202074,\"onlineRunningTime\":20281.61000003898,\"pid\":79,\"ramUsage\":2.4,\"server\":\"17.1.2.9\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"17.1.2.9\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"17.1.2.9\",\"moduleSequenceNumber\":368}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"0.1.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"0.1.7.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[4978097550,1704,8520,6390]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":277061.93963999976,\"onlineMoneyMade\":4978097550,\"onlineRunningTime\":20278.61000003897,\"pid\":80,\"ramUsage\":2.4,\"server\":\"0.1.7.3\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"0.1.7.3\",\"moduleSequenceNumber\":369}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"0.1.7.3\",\"moduleSequenceNumber\":370}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"85.0.1.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"85.0.1.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[3706755504,1278,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":257772.8172599998,\"onlineMoneyMade\":3706755504,\"onlineRunningTime\":20275.61000003896,\"pid\":81,\"ramUsage\":2.4,\"server\":\"85.0.1.8\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"85.0.1.8\",\"moduleSequenceNumber\":371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"85.0.1.8\",\"moduleSequenceNumber\":372}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"60.3.3.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"60.3.3.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[2957479866,1278,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":257772.8172599998,\"onlineMoneyMade\":2957479866,\"onlineRunningTime\":20272.81000003895,\"pid\":82,\"ramUsage\":2.4,\"server\":\"60.3.3.5\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"60.3.3.5\",\"moduleSequenceNumber\":373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"60.3.3.5\",\"moduleSequenceNumber\":374}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"70.2.6.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"70.2.6.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[2849660544,1704,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":263033.4869999998,\"onlineMoneyMade\":2849660544,\"onlineRunningTime\":20269.81000003894,\"pid\":83,\"ramUsage\":2.4,\"server\":\"70.2.6.4\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"70.2.6.4\",\"moduleSequenceNumber\":375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"70.2.6.4\",\"moduleSequenceNumber\":376}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"60.0.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"60.0.9.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[3408918456,1704,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":263033.4869999998,\"onlineMoneyMade\":3408918456,\"onlineRunningTime\":20267.01000003893,\"pid\":84,\"ramUsage\":2.4,\"server\":\"60.0.9.3\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"60.0.9.3\",\"moduleSequenceNumber\":377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"60.0.9.3\",\"moduleSequenceNumber\":378}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"23.6.2.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"23.6.2.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[2771991798,2130,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":268294.1567399998,\"onlineMoneyMade\":2771991798,\"onlineRunningTime\":20264.010000038917,\"pid\":85,\"ramUsage\":2.4,\"server\":\"23.6.2.2\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"23.6.2.2\",\"moduleSequenceNumber\":379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"23.6.2.2\",\"moduleSequenceNumber\":380}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"29.4.8.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"29.4.8.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[1084562346,1278,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":257772.8172599998,\"onlineMoneyMade\":1084562346,\"onlineRunningTime\":20261.210000038907,\"pid\":86,\"ramUsage\":2.4,\"server\":\"29.4.8.0\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"29.4.8.0\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"29.4.8.0\",\"moduleSequenceNumber\":382}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"9.7.1.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"9.7.1.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[1019062290,1278,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":257772.8172599998,\"onlineMoneyMade\":1019062290,\"onlineRunningTime\":20258.210000038896,\"pid\":87,\"ramUsage\":2.4,\"server\":\"9.7.1.3\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"9.7.1.3\",\"moduleSequenceNumber\":383}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"9.7.1.3\",\"moduleSequenceNumber\":384}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"57.1.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"57.1.0.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[3637151364,2130,8094,7242]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291090.39227999985,\"onlineMoneyMade\":3637151364,\"onlineRunningTime\":20255.210000038885,\"pid\":88,\"ramUsage\":2.4,\"server\":\"57.1.0.4\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"57.1.0.4\",\"moduleSequenceNumber\":385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"57.1.0.4\",\"moduleSequenceNumber\":386}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"43.4.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"43.4.7.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[2036769900,1278,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":259526.3738399998,\"onlineMoneyMade\":2036769900,\"onlineRunningTime\":20252.410000038875,\"pid\":89,\"ramUsage\":2.4,\"server\":\"43.4.7.3\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"43.4.7.3\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"43.4.7.3\",\"moduleSequenceNumber\":388}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"57.8.6.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"57.8.6.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[2414155632,1704,6816,7242]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":266540.6001599998,\"onlineMoneyMade\":2414155632,\"onlineRunningTime\":20249.410000038864,\"pid\":90,\"ramUsage\":2.4,\"server\":\"57.8.6.4\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"57.8.6.4\",\"moduleSequenceNumber\":389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"57.8.6.4\",\"moduleSequenceNumber\":390}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"50.3.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"50.3.4.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[3159834126,1278,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":263033.4869999998,\"onlineMoneyMade\":3159834126,\"onlineRunningTime\":20246.410000038853,\"pid\":91,\"ramUsage\":2.4,\"server\":\"50.3.4.6\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"50.3.4.6\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"50.3.4.6\",\"moduleSequenceNumber\":392}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"6.3.5.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"6.3.5.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[703017576,1704,6390,7668]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":270047.71331999986,\"onlineMoneyMade\":703017576,\"onlineRunningTime\":20243.610000038843,\"pid\":92,\"ramUsage\":2.4,\"server\":\"6.3.5.8\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"6.3.5.8\",\"moduleSequenceNumber\":393}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"6.3.5.8\",\"moduleSequenceNumber\":394}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"90.6.6.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"90.6.6.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[1960478412,1704,7668,7242]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":277061.9396399998,\"onlineMoneyMade\":1960478412,\"onlineRunningTime\":20240.810000038833,\"pid\":93,\"ramUsage\":2.4,\"server\":\"90.6.6.4\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"90.6.6.4\",\"moduleSequenceNumber\":395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"90.6.6.4\",\"moduleSequenceNumber\":396}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"82.3.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"82.3.3.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[2721742968,2130,7242,7242]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":280569.05279999983,\"onlineMoneyMade\":2721742968,\"onlineRunningTime\":20237.810000038822,\"pid\":94,\"ramUsage\":2.4,\"server\":\"82.3.3.3\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"82.3.3.3\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"82.3.3.3\",\"moduleSequenceNumber\":398}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"44.3.2.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"44.3.2.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"74.3.3.9\":[5964206610,3408,6390,7242]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":285829.7225399999,\"onlineMoneyMade\":5964206610,\"onlineRunningTime\":20235.010000038812,\"pid\":95,\"ramUsage\":2.4,\"server\":\"44.3.2.6\",\"threads\":426}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"44.3.2.6\",\"moduleSequenceNumber\":399}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] || 'n00dles';\\nvar maxThreads = args[1] || 1;\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target, {threads: maxThreads});\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target, {threads: maxThreads, stock: false});\\n    } else {\\n        // Otherwise, hack it\\n        hack(target, {threads: maxThreads, stock: false});\\n    }\\n}\",\"filename\":\"hack-target-parallel.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"44.3.2.6\",\"moduleSequenceNumber\":400}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":810.623466945465,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":225377.38700064312,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":4534.7100358345715,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":38,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":20078.485698088025,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":9231.300101613235,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":4044.330964168234,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":20,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":40257.36544570077,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"ECorp\":\"70.7.8.2\",\"MegaCorp\":\"31.7.0.0\",\"Bachman & Associates\":\"38.1.7.4\",\"Blade Industries\":\"67.1.1.1\",\"NWO\":\"96.2.4.9\",\"Clarke Incorporated\":\"55.5.9.8\",\"OmniTek Incorporated\":\"83.3.3.6\",\"Four Sigma\":\"71.6.6.8\",\"KuaiGong International\":\"98.7.8.6\",\"Fulcrum Technologies\":\"63.9.7.3\",\"Fulcrum Secret Technologies Server\":\"16.7.2.2\",\"Storm Technologies\":\"9.5.5.5\",\"DefComm\":\"20.9.0.4\",\"Helios Labs\":\"83.8.1.9\",\"VitaLife\":\"35.1.2.9\",\"Icarus Microsystems\":\"46.9.8.8\",\"Universal Energy\":\"88.4.9.7\",\"Galactic Cybersystems\":\"35.7.0.6\",\"AeroCorp\":\"30.2.7.3\",\"Omnia Cybersystems\":\"12.9.1.7\",\"Solaris Space Systems\":\"53.1.0.1\",\"DeltaOne\":\"79.9.4.6\",\"Global Pharmaceuticals\":\"17.0.1.6\",\"Nova Medical\":\"92.3.7.5\",\"LexoCorp\":\"22.6.5.2\",\"Rho Construction\":\"98.4.3.1\",\"Alpha Enterprises\":\"1.7.9.4\",\"Aevum Police Headquarters\":\"65.2.5.9\",\"Rothman University\":\"87.8.4.1\",\"ZB Institute of Technology\":\"96.8.6.4\",\"Summit University\":\"64.7.6.7\",\"SysCore Securities\":\"66.4.4.8\",\"CompuTek\":\"28.2.0.3\",\"NetLink Technologies\":\"79.2.9.7\",\"Noodle Bar\":\"10.3.6.6\",\"FoodNStuff\":\"89.6.4.8\",\"Joe's Guns\":\"11.8.7.4\",\"Omega Software\":\"55.8.4.0\",\"Crush Fitness Gym\":\"97.2.0.0\",\"Iron Gym\":\"29.2.5.5\",\"Millenium Fitness Gym\":\"42.9.2.2\",\"Powerhouse Gym\":\"15.9.7.5\",\"Snap Fitness Gym\":\"85.6.4.5\",\"BitRunners Server\":\"94.6.9.6\",\"The Black Hand Server\":\"23.9.6.7\",\"NiteSec Server\":\"42.8.9.2\",\"The Dark Army Server\":\"53.5.6.0\",\"CyberSec Server\":\"12.7.9.6\",\"Daedalus Server\":\"73.1.7.4\",\"w0r1d_d43m0n\":\"0.2.8.0\",\"Darkweb Server\":\"79.1.1.7\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":29796.66549281457,\"lastPrice\":29701.64501231814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":true,\"otlkMag\":16.795544317679948,\"otlkMagForecast\":66.73229193494494,\"cap\":319159058,\"spreadPerc\":0.2,\"shareTxForMovement\":35052,\"shareTxUntilMovement\":35052,\"totalShares\":105700000,\"maxShares\":21100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":48579.008632515746,\"lastPrice\":48730.806685652526,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":17.799097602492655,\"otlkMagForecast\":67.21216229365922,\"cap\":681664279,\"spreadPerc\":0.3,\"shareTxForMovement\":84017,\"shareTxUntilMovement\":84017,\"totalShares\":73500000,\"maxShares\":14700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":9255.613865973768,\"lastPrice\":9200.850990018267,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":11.812564239698744,\"otlkMagForecast\":35.69174176451264,\"cap\":317560080,\"spreadPerc\":0.3,\"shareTxForMovement\":88279,\"shareTxUntilMovement\":88279,\"totalShares\":109300000,\"maxShares\":21900000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":28381.480867867187,\"lastPrice\":28223.992682948676,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":9.754227832053086,\"otlkMagForecast\":60.54914495830088,\"cap\":462485151,\"spreadPerc\":0.3,\"shareTxForMovement\":42583,\"shareTxUntilMovement\":42583,\"totalShares\":67600000,\"maxShares\":13500000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":96833.24100140252,\"lastPrice\":96388.62433822553,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":13.831590547982035,\"otlkMagForecast\":61.3068687296061,\"cap\":551742942,\"spreadPerc\":0.1,\"shareTxForMovement\":47116,\"shareTxUntilMovement\":47116,\"totalShares\":52600000,\"maxShares\":10500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":81394.04256830031,\"lastPrice\":82005.66338198041,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":false,\"otlkMag\":37.393587435847145,\"otlkMagForecast\":11.272452810104129,\"cap\":153400539,\"spreadPerc\":0.8,\"shareTxForMovement\":68805,\"shareTxUntilMovement\":68805,\"totalShares\":27500000,\"maxShares\":5500000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":89822.60567059097,\"lastPrice\":90337.1758782285,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":10.204130679860047,\"otlkMagForecast\":39.80809252282909,\"cap\":137125745,\"spreadPerc\":0.1,\"shareTxForMovement\":74844,\"shareTxUntilMovement\":74844,\"totalShares\":89700000,\"maxShares\":17900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":1636198.772489905,\"lastPrice\":1621600.6320066093,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":19.58136843337214,\"otlkMagForecast\":33.77682841637191,\"cap\":840930165,\"spreadPerc\":0.9,\"shareTxForMovement\":42892,\"shareTxUntilMovement\":42892,\"totalShares\":57000000,\"maxShares\":11400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":49470.30857214278,\"lastPrice\":49170.33342908065,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":5.459001169767182,\"otlkMagForecast\":54.47373823454737,\"cap\":426451126,\"spreadPerc\":0.5,\"shareTxForMovement\":45500,\"shareTxUntilMovement\":45500,\"totalShares\":52500000,\"maxShares\":10500000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":3491.0184281310803,\"lastPrice\":3508.6799985601288,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":5.997594116743314,\"otlkMagForecast\":57.89653622084108,\"cap\":88909789,\"spreadPerc\":0.4,\"shareTxForMovement\":84555,\"shareTxUntilMovement\":84555,\"totalShares\":49400000,\"maxShares\":9900000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":37837.3789817495,\"lastPrice\":37997.83801232271,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":8.641771926447033,\"otlkMagForecast\":60.65689191432155,\"cap\":80424084,\"spreadPerc\":0.3,\"shareTxForMovement\":99225,\"shareTxUntilMovement\":99225,\"totalShares\":54400000,\"maxShares\":10900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":2994.5564774395807,\"lastPrice\":3010.8203376138167,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":10.056337842266428,\"otlkMagForecast\":57.73392121256002,\"cap\":93244375,\"spreadPerc\":0.6,\"shareTxForMovement\":88094,\"shareTxUntilMovement\":88094,\"totalShares\":118000000,\"maxShares\":23600000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":46249.73741179244,\"lastPrice\":46459.63496199167,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":5.221307510922726,\"otlkMagForecast\":42.219663827545794,\"cap\":263169306,\"spreadPerc\":0.8,\"shareTxForMovement\":50493,\"shareTxUntilMovement\":50493,\"totalShares\":39200000,\"maxShares\":7800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":21419.748643964023,\"lastPrice\":21340.36334633987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":10.667204730285187,\"otlkMagForecast\":60.39180748257401,\"cap\":82166451,\"spreadPerc\":0.9,\"shareTxForMovement\":104271,\"shareTxUntilMovement\":104271,\"totalShares\":39800000,\"maxShares\":8000000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":4595.746209997077,\"lastPrice\":4617.287159895795,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":6.961844062620319,\"otlkMagForecast\":56.95613136291774,\"cap\":129379019,\"spreadPerc\":0.7,\"shareTxForMovement\":82606,\"shareTxUntilMovement\":82606,\"totalShares\":64800000,\"maxShares\":13000000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":9020.878086940793,\"lastPrice\":8974.805520965405,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":5.847357364792902,\"otlkMagForecast\":45.44834280326653,\"cap\":278384366,\"spreadPerc\":0.7,\"shareTxForMovement\":53502,\"shareTxUntilMovement\":53502,\"totalShares\":50700000,\"maxShares\":10100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":9186.870534342095,\"lastPrice\":9133.189875027276,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":8.56960266690239,\"otlkMagForecast\":58.169902324212366,\"cap\":252034770,\"spreadPerc\":0.5,\"shareTxForMovement\":118725,\"shareTxUntilMovement\":118725,\"totalShares\":45500000,\"maxShares\":9100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":54041.137423674576,\"lastPrice\":54302.477552767574,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.410158625447368,\"otlkMagForecast\":57.91722336415266,\"cap\":203870896,\"spreadPerc\":1,\"shareTxForMovement\":90048,\"shareTxUntilMovement\":90048,\"totalShares\":23900000,\"maxShares\":4800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":52555.76025880485,\"lastPrice\":52279.60146294358,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":6.878304054539359,\"otlkMagForecast\":42.210910391004354,\"cap\":487306088,\"spreadPerc\":1.1,\"shareTxForMovement\":43101,\"shareTxUntilMovement\":43101,\"totalShares\":22700000,\"maxShares\":4500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":135711.88608352302,\"lastPrice\":138135.13145224217,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.4,\"b\":false,\"otlkMag\":19.998579072735893,\"otlkMagForecast\":26.243313476554498,\"cap\":126699777,\"spreadPerc\":1.1,\"shareTxForMovement\":27534,\"shareTxUntilMovement\":27534,\"totalShares\":60000000,\"maxShares\":12000000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":15384.381012527436,\"lastPrice\":15252.745137030912,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.16,\"b\":true,\"otlkMag\":14.610050655602473,\"otlkMagForecast\":62.076968788819414,\"cap\":92027445,\"spreadPerc\":1,\"shareTxForMovement\":60837,\"shareTxUntilMovement\":60837,\"totalShares\":38300000,\"maxShares\":7700000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5175.407392644338,\"lastPrice\":5197.740070370917,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":5.700418345155567,\"otlkMagForecast\":43.28005664549765,\"cap\":126626344,\"spreadPerc\":0.4,\"shareTxForMovement\":125209,\"shareTxUntilMovement\":125209,\"totalShares\":34500000,\"maxShares\":6900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":6328.724459535483,\"lastPrice\":6243.2576786662285,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.84,\"b\":true,\"otlkMag\":17.79076744383018,\"otlkMagForecast\":67.87616946569685,\"cap\":86315812,\"spreadPerc\":1.5,\"shareTxForMovement\":45342,\"shareTxUntilMovement\":45342,\"totalShares\":32600000,\"maxShares\":6500000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":12722.053617578835,\"lastPrice\":12578.867394644456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.53,\"b\":true,\"otlkMag\":5.45287042012524,\"otlkMagForecast\":52.47285179800866,\"cap\":23177524,\"spreadPerc\":1,\"shareTxForMovement\":25981,\"shareTxUntilMovement\":25981,\"totalShares\":56300000,\"maxShares\":11300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2046.6455823982483,\"lastPrice\":2032.8823041113556,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":false,\"otlkMag\":5.197229507075925,\"otlkMagForecast\":45.76321725149614,\"cap\":34466435,\"spreadPerc\":1,\"shareTxForMovement\":103877,\"shareTxUntilMovement\":103877,\"totalShares\":96900000,\"maxShares\":19400000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":627.7553074990569,\"lastPrice\":637.2830239553168,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.04,\"b\":true,\"otlkMag\":5.409197481344207,\"otlkMagForecast\":54.61596212897486,\"cap\":49506080,\"spreadPerc\":1.9,\"shareTxForMovement\":52958,\"shareTxUntilMovement\":52958,\"totalShares\":18500000,\"maxShares\":3700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":7163.811949504432,\"lastPrice\":7105.659854850519,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":true,\"otlkMag\":6.459921456335502,\"otlkMagForecast\":56.184791886841374,\"cap\":36118379,\"spreadPerc\":0.8,\"shareTxForMovement\":81102,\"shareTxUntilMovement\":81102,\"totalShares\":12000000,\"maxShares\":2400000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":713.1413602234162,\"lastPrice\":709.1316891362643,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":5.457167647141011,\"otlkMagForecast\":54.87646951663536,\"cap\":13303412,\"spreadPerc\":0.9,\"shareTxForMovement\":166117,\"shareTxUntilMovement\":166117,\"totalShares\":75100000,\"maxShares\":15000000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1906.3633858136295,\"lastPrice\":1874.1537758698678,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.31,\"b\":true,\"otlkMag\":9.86395602881198,\"otlkMagForecast\":59.77948046810007,\"cap\":14445410,\"spreadPerc\":0.7,\"shareTxForMovement\":27141,\"shareTxUntilMovement\":27141,\"totalShares\":13500000,\"maxShares\":2700000}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":263.10299155570016,\"lastPrice\":269.3864548439535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.21,\"b\":true,\"otlkMag\":8.444178272478268,\"otlkMagForecast\":59.915611508930134,\"cap\":3228861,\"spreadPerc\":1.4,\"shareTxForMovement\":41043,\"shareTxUntilMovement\":41043,\"totalShares\":75700000,\"maxShares\":15100000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":157.04777984209127,\"lastPrice\":155.18888529637908,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.61,\"b\":false,\"otlkMag\":11.04953290031985,\"otlkMagForecast\":41.049041522106606,\"cap\":6162221,\"spreadPerc\":1,\"shareTxForMovement\":42134,\"shareTxUntilMovement\":42134,\"totalShares\":152200000,\"maxShares\":30400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":16535.565102379584,\"lastPrice\":16621.681398996694,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":9.044540220530772,\"otlkMagForecast\":57.735294467243136,\"cap\":127105269,\"spreadPerc\":0.4,\"shareTxForMovement\":105320,\"shareTxUntilMovement\":105320,\"totalShares\":12900000,\"maxShares\":2600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":23374.130085251276,\"lastPrice\":23261.638014001303,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.895518459563696,\"otlkMagForecast\":60.34934962031109,\"cap\":320280952,\"spreadPerc\":0.2,\"shareTxForMovement\":105173,\"shareTxUntilMovement\":105173,\"totalShares\":21200000,\"maxShares\":4200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":499600,\"lastUpdate\":1628313459567,\"ticksUntilCycle\":32}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"Editor\":\"CodeMirror\",\"EditorKeybinding\":\"default\",\"EditorTheme\":\"dracula\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"EditorHighlightActiveLine\":true,\"EditorShowInvisibles\":false,\"EditorUseSoftTab\":true,\"EditorAutoCloseBrackets\":true,\"EditorEnableLinting\":false,\"EditorContinueComments\":true}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.52.0\"","AllGangsSave":"","LastExportBonus":"1628126465573"}}