{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":238,\"hp\":23,\"max_hp\":23,\"strength\":134,\"defense\":134,\"dexterity\":134,\"agility\":134,\"charisma\":134,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":885909.961741266,\"strength_exp\":34469.51999999988,\"defense_exp\":34289.51999999987,\"dexterity_exp\":34467.01999999987,\"agility_exp\":34467.01999999987,\"charisma_exp\":34348.85360000969,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":\"81477850.606285735613\",\"homeComputer\":\"0.2.0.6\",\"city\":\"Sector-12\",\"location\":\"Central Intelligence Agency\",\"jobs\":{\"DeltaOne\":\"IT Intern\",\"Joe's Guns\":\"Part-time Employee\",\"Central Intelligence Agency\":\"IT Intern\"},\"companyName\":\"Central Intelligence Agency\",\"currentServer\":\"0.2.0.6\",\"purchasedServers\":[\"19.3.4.3\",\"78.9.7.4\",\"9.3.5.2\",\"73.8.0.1\",\"62.0.4.1\",\"15.3.5.5\",\"74.1.0.9\",\"29.1.0.2\",\"26.3.9.8\",\"13.5.3.9\",\"63.0.3.5\",\"4.8.4.8\",\"7.0.1.6\",\"64.6.5.1\",\"40.9.7.2\",\"49.7.0.4\",\"94.2.1.6\",\"46.8.4.0\",\"61.1.8.5\",\"3.6.2.6\",\"35.9.7.2\",\"16.8.1.2\",\"79.8.8.3\",\"69.6.9.2\",\"60.7.2.4\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":3,\"level\":100,\"moneyGainRatePerSecond\":1863.377109876389,\"onlineTimeSeconds\":257154.6000010604,\"ram\":64,\"totalMoneyGenerated\":5364075.468122626,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":4,\"moneyGainRatePerSecond\":9.499685161990415,\"onlineTimeSeconds\":255787.2000010553,\"ram\":8,\"totalMoneyGenerated\":1891530.0123882266,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":2,\"moneyGainRatePerSecond\":3.2,\"onlineTimeSeconds\":255786.80000105526,\"ram\":1,\"totalMoneyGenerated\":818491.5200019365,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":251798.80000104275,\"ram\":1,\"totalMoneyGenerated\":402878.0800009736,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82201.9999998372,\"ram\":1,\"totalMoneyGenerated\":131523.20000039059,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82200.9999998372,\"ram\":1,\"totalMoneyGenerated\":131521.60000039058,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82200.79999983718,\"ram\":1,\"totalMoneyGenerated\":131521.28000039057,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82200.59999983718,\"ram\":1,\"totalMoneyGenerated\":131520.96000039057,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82200.39999983719,\"ram\":1,\"totalMoneyGenerated\":131520.6400003906,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82200.19999983719,\"ram\":1,\"totalMoneyGenerated\":131520.32000039058,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82200.19999983719,\"ram\":1,\"totalMoneyGenerated\":131520.32000039058,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82199.9999998372,\"ram\":1,\"totalMoneyGenerated\":131520.00000039057,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82199.79999983718,\"ram\":1,\"totalMoneyGenerated\":131519.68000039057,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82199.59999983718,\"ram\":1,\"totalMoneyGenerated\":131519.3600003906,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82199.59999983718,\"ram\":1,\"totalMoneyGenerated\":131519.3600003906,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82199.39999983719,\"ram\":1,\"totalMoneyGenerated\":131519.04000039058,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82199.19999983719,\"ram\":1,\"totalMoneyGenerated\":131518.72000039057,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.6,\"onlineTimeSeconds\":82198.9999998372,\"ram\":1,\"totalMoneyGenerated\":131518.40000039057,\"name\":\"hacknet-node-17\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Sector-12\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Augmented Targeting I\"}],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":1,\"karma\":-5.5,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":false,\"focus\":false,\"workType\":\"Working for Company\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"commit larceny\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":false,\"firstProgramAvailable\":true,\"lastUpdate\":1628128218306,\"totalPlaytime\":258246200,\"playtimeSinceLastAug\":258246200,\"playtimeSinceLastBitnode\":258246200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-43200,\"codingcontract\":0,\"corporation\":0,\"crime\":1037000,\"gang\":0,\"hacking\":2493442391,\"hacknetnode\":10318257.960745065,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2504970248.9468904,\"work\":215799.99999999965}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-43200,\"codingcontract\":0,\"corporation\":0,\"crime\":1037000,\"gang\":0,\"hacking\":2493442391,\"hacknetnode\":10318257.960745065,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2504970248.9468904,\"work\":215799.99999999965}},\"scriptProdSinceLastAug\":2493442103,\"exploits\":[],\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null,\"factionWorkType\":\"Faction Field Work\"}}","AllServersSave":"{\"0.2.0.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"0.2.0.6\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}}],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\nvar target = \\\"foodnstuff\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"early-game-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":92}},{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"scan.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":93}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll\\n// be 8GB.\\nvar ram = 8;\\nvar script = 'hack-target.script';\\n\\n// Iterator we'll use for our loop\\nvar i = 0;\\n\\n// Continuously try to purchase servers until we've reached the maximum\\n// amount of servers\\nwhile (i < getPurchasedServerLimit()) {\\n    // Check if we have enough money to purchase a server\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\n        // If we have enough money, then:\\n        //  1. Purchase the server\\n        //  2. Copy our hacking script onto the newly-purchased server\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\n        //  4. Increment our iterator to indicate that we've bought a new server\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\n        scp(script, hostname);\\n        exec(script, hostname, 3);\\n        ++i;\\n    }\\n}\",\"filename\":\"purchaseServer.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.15,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":94}},{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":95}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var possibleHosts = JSON.parse(read('hosts-info.db.txt'));\\nvar targetScript = \\\"hack-target.script\\\";\\n\\nfor (var i = 0; i < possibleHosts.length; i++) {\\n    var target = possibleHosts[i];\\n    \\n    if (target.hasRootAccess) {\\n        tprint('Conecting to target: ' + target.hostName);\\n        var maxRam = target.maxRAM;\\n        var maxPossibleInstances = Math.floor(maxRam / 2.45);\\n        if(target.hostName == 'home' || target.maxRAM == 0){\\n            continue;       \\n        }\\n        killall(target.hostName);\\n        scp(targetScript, target.hostName);\\n        exec(targetScript, target.hostName, maxPossibleInstances);\\n    }\\n}\",\"filename\":\"corona-infect.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.05,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":4188}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = getHostname();\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"self-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":97}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var possibleHosts = scan(\\\"home\\\");\\nvar targetHosts = [];\\n\\nfor (var i = 0; i < possibleHosts.length; i++) {\\n    var target = possibleHosts[i];\\n    var targetHackChance = Math.floor(hackChance(target) * 100);\\n    var maxMoney = (getServerMaxMoney(target) / 1000000).toFixed(2);\\n    var availableMoney = (getServerMoneyAvailable(target) / 1000000).toFixed(2);\\n\\n    print(\\\"===============\\\");\\n    print(\\\"Server: \\\" + target);\\n    print(\\\"Hack Chance: \\\" + targetHackChance + \\\"%\\\");\\n    print(\\\"Money: \\\" + availableMoney + \\\" M/\\\" + maxMoney + \\\" M\\\");\\n}\",\"filename\":\"target-finder.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":98}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var availableHosts = scan('home');\\nvar discoveredHosts = ['home'];\\n\\nfor (var i = 0; i < availableHosts.length; i++) {\\n  var current = availableHosts[i];\\n  discoveredHosts.push(current);\\n\\n  depthFirstSearch(current);\\n\\n  print(\\\"Discovered hosts so far (\\\" + (i + 1) + \\\"/\\\" + availableHosts.length + \\\" root nodes done): \\\" + discoveredHosts);\\n}\\n\\nwrite('host-names.db', discoveredHosts, 'w');\\n\\nfunction depthFirstSearch(rootNode) {\\n  var hostsToExplore = [rootNode];\\n\\n  while (hostsToExplore.length > 0) {\\n    var host = hostsToExplore.pop();\\n    var scanResults = scan(host);\\n\\n    scanResults = removeAlreadyDiscovered(scanResults);\\n\\n    print(\\\"Scan results (unexplored only) for \\\" + host + \\\": \\\" + scanResults);\\n\\n    hostsToExplore = hostsToExplore.concat(scanResults);\\n    discoveredHosts = discoveredHosts.concat(scanResults);\\n\\n    print(\\\"Hosts to explore: \\\" + hostsToExplore);\\n  }\\n}\\n\\nfunction removeAlreadyDiscovered(scanResults) {\\n  for (var i = 0; i < scanResults.length; i++) {\\n    var result = scanResults[i];\\n    if (discoveredHosts.indexOf(result) > -1) {\\n      scanResults.splice(i, 1);\\n    }\\n  }\\n\\n  return scanResults;\\n}\",\"filename\":\"discovery.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.8,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":99}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var hosts = JSON.parse(read('hosts-info.db.txt'));\\nvar hackCommands = createHackCommands();\\n\\nvar maxNumberOfHackeablePorts = getMaximumNumberOfHackeablePorts();\\nvar eligibleHosts = getEligibleHosts(hosts, maxNumberOfHackeablePorts);\\n\\nfor (var i = 0; i < eligibleHosts.length; i++) {\\n  var target = eligibleHosts[i];\\n  print('Rooting ' + target.hostName + ' - ' + target.numberOfPortsRequired + ' ports required');     \\n  rootTheirAss(target);  \\n}\\n\\nfunction rootTheirAss(target) {\\n  for (var i = target.numberOfPortsRequired; i > -1; i--) {\\n    hackCommands[i](target.hostName);\\n  }\\n}\\n\\nfunction createHackCommands() {\\n  var nukeDelegate = function (target) { nuke(target); };\\n  var sshDelegate = function (target) { brutessh(target); };\\n  var ftpDelegate = function (target) { ftpcrack(target); };\\n  var smtpDelegate = function (target) { relaysmtp(target); };\\n  var httpDelegate = function (target) { httpworm(target); };\\n  var sqliDelegate = function (target) { sqlinject(target); };\\n\\n  return [nukeDelegate, sshDelegate, ftpDelegate, smtpDelegate, httpDelegate, sqliDelegate];\\n}\\n\\nfunction getMaximumNumberOfHackeablePorts() {\\n  var numberOfPorts = 0;\\n\\n  if (fileExists('BruteSSH.exe')) { numberOfPorts++; }\\n  if (fileExists('FTPCrack.exe')) { numberOfPorts++; }\\n  if (fileExists('relaySMTP.exe')) { numberOfPorts++; }\\n  if (fileExists('HTTPWorm.exe')) { numberOfPorts++; }\\n  if (fileExists('SQLInject.exe')) { numberOfPorts++; }\\n\\n  return numberOfPorts;\\n}\\n\\nfunction getEligibleHosts(hosts, maxNumberOfHackeablePorts) {\\n  var result = [];\\n\\n  print('Finding eligible hosts...');\\n\\n  for (var i = 0; i < hosts.length; i++) {\\n    var host = hosts[i];\\n\\n    if (!host.hasRootAccess && maxNumberOfHackeablePorts >= host.numberOfPortsRequired) {\\n      result.push(host);\\n    }\\n  }\\n\\n  print('Rooting ' + result.length + ' hosts, ' + maxNumberOfHackeablePorts + ' maximum hackable ports');\\n\\n  return result;\\n}\",\"filename\":\"rootkit.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.05,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var hosts = read(\\\"host-names.db.txt\\\").split(',');\\nvar ONE_MILLION = 1000000;\\nvar TWO_DECIMAL_PLACES = 2;\\n\\nresult = [];\\n\\nfor (var i = 0; i < hosts.length; i++) {\\n  var target = hosts[i];\\n  print('=========' + target + ' (' + calculateProgress(i) + '% done)' + '=========')\\n  result.push(createServerInfoObject(target));\\n}\\n\\nwrite('hosts-info.db', JSON.stringify(result), 'w');\\n\\nfunction calculateProgress(currentIndex) {\\n  return (((currentIndex + 1) / hosts.length) * 100).toFixed(TWO_DECIMAL_PLACES);\\n}\\n\\nfunction createServerInfoObject(target) {\\n  return {\\n    hostName: target,\\n    hasRootAccess: hasRootAccess(target),\\n    hackChancePercentage: Math.floor(hackChance(target) * 100),\\n    maxMoneyInMillions: parseFloat((getServerMaxMoney(target) / ONE_MILLION).toFixed(TWO_DECIMAL_PLACES)),\\n    availableMoneyInMillions: parseFloat((getServerMoneyAvailable(target) / ONE_MILLION).toFixed(TWO_DECIMAL_PLACES)),\\n    numberOfPortsRequired: getServerNumPortsRequired(target),\\n    hackTimeInSeconds: parseFloat(getHackTime(target).toFixed(TWO_DECIMAL_PLACES)),\\n    growTimeInSeconds: parseFloat(getGrowTime(target).toFixed(TWO_DECIMAL_PLACES)),\\n    weakenTimeInSeconds: parseFloat(getWeakenTime(target).toFixed(TWO_DECIMAL_PLACES)),\\n    maxRAM: parseFloat(getServerMaxRam(target).toFixed(TWO_DECIMAL_PLACES))\\n  };\\n\\n}\",\"filename\":\"enrich-discovery.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var HACK_CHANCE_WEIGHT = 9;\\nvar MAX_MONEY_WEIGHT = 5;\\nvar AVAILABLE_MONEY_WEIGHT = 10;\\nvar hosts = JSON.parse(read('hosts-info.db.txt'));\\nvar ellegibleToHack = [];\\nvar result = [];\\n\\nvar maxMaximumMoney = 0;\\nvar maxAvailableMoney = 0;\\n\\nprint('Finding ellegible hosts...')\\nfor (var i = 0; i < hosts.length; i++) {\\n  printProgress(i, hosts.length);\\n  var host = hosts[i];\\n\\n  if (host.hasRootAccess) {\\n    ellegibleToHack.push(host);\\n    maxMaximumMoney = Math.max(maxMaximumMoney, host.maxMoneyInMillions); \\n    maxAvailableMoney = Math.max(maxAvailableMoney, host.availableMoneyInMillions);\\n  }\\n}\\n\\nprint('maxMoney: ' + maxMaximumMoney);\\nprint('maxAvailableMoney: ' + maxAvailableMoney);\\n\\nprint('Classifying hosts...')\\nfor (var i = 0; i < ellegibleToHack.length; i++) { \\n  printProgress(i, ellegibleToHack.length);  \\n  var host = ellegibleToHack[i];\\n  \\n  var normalizedHackPercentage = (host.hackChancePercentage / 100);\\n  var normalizedMaxMoney = (host.maxMoneyInMillions / maxMaximumMoney);\\n  var normalizedAvailableMoney = (host.availableMoneyInMillions / maxAvailableMoney);\\n\\n  host['score'] = \\n    (\\n      normalizedHackPercentage * HACK_CHANCE_WEIGHT \\n      + normalizedMaxMoney * MAX_MONEY_WEIGHT \\n      + normalizedAvailableMoney * AVAILABLE_MONEY_WEIGHT\\n    )\\n    / (HACK_CHANCE_WEIGHT + MAX_MONEY_WEIGHT + AVAILABLE_MONEY_WEIGHT);\\n\\n  print('Host: ' + host.hostName + ' - Score: ' + host.score);\\n  result.push(host);\\n}\\n\\nwrite('hosts-info-classified.db', JSON.stringify(result), 'w');\\n\\nfunction printProgress(current, total){\\n  var progress = (current/total * 100).toFixed(2);\\n  print('Progress: ' + progress + '%');\\n}\",\"filename\":\"classify.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.65,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":102}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":11186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = getPurchasedServers();\\nvar script = 'hack-target.script';\\nvar scriptRAM = 2.40;\\n\\nfor (var i = 0; i < servers.length; i++){\\n    var server = servers[i];\\n    var maxRam = getServerMaxRam(server);\\n    var maxPossibleInstances = Math.floor(maxRam / scriptRAM);\\n    \\n    killall(server);\\n    scp(script, server);\\n    exec(script, server, maxPossibleInstances);\\n}\",\"filename\":\"update-purchased-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.3,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":4290}},{\"ctor\":\"Script\",\"data\":{\"code\":\"killall('pserv-0');\\ndeleteServer('pserv-0');\",\"filename\":\"sell-server.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.35,\"server\":\"0.2.0.6\",\"moduleSequenceNumber\":105}}],\"serversOnNetwork\":[\"22.5.4.3\",\"94.4.9.9\",\"45.5.8.6\",\"47.4.2.3\",\"60.3.7.3\",\"97.3.0.4\",\"41.5.1.6\",\"19.3.4.3\",\"78.9.7.4\",\"9.3.5.2\",\"73.8.0.1\",\"62.0.4.1\",\"15.3.5.5\",\"74.1.0.9\",\"29.1.0.2\",\"26.3.9.8\",\"13.5.3.9\",\"63.0.3.5\",\"4.8.4.8\",\"7.0.1.6\",\"64.6.5.1\",\"40.9.7.2\",\"49.7.0.4\",\"94.2.1.6\",\"46.8.4.0\",\"61.1.8.5\",\"3.6.2.6\",\"35.9.7.2\",\"16.8.1.2\",\"79.8.8.3\",\"69.6.9.2\",\"60.7.2.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"hosts.db.txt\",\"text\":\"home,n00dles,foodnstuff,max-hardware,phantasy,comptek,johnson-ortho,syscore,aevum-police,millenium-fitness,snap-fitness,global-pharm,rothman-uni,lexo-corp,sigma-cosmetics,nectar-net,CSEC,neo-net,silver-helix,omega-net,the-hub,crush-fitness,summit-uni,I.I.I.I,rho-construction,avmnite-02h,zb-institute,netlink,catalyst,alpha-ent,galactic-cyber,aerocorp,omnia,univ-energy,solaris,zeus-med,nova-med,infocomm,applied-energetics,vitalife,zb-def,titan-labs,microdyne,stormtech,omnitek,blade,megacorp,fulcrumtech,helios,4sigma,nwo,clarkinc,The-Cave,kuai-gong,.,b-and-a,powerhouse-fitness,ecorp,fulcrumassets,deltaone,unitalife,defcomm,icarus,taiyang-digital,run4theh111z,joesguns,hong-fang-tea,zer0,harakiri-sushi,iron-gym,pserv-0,pserv-0-0\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"host-names.db.txt\",\"text\":\"home,n00dles,foodnstuff,max-hardware,phantasy,comptek,johnson-ortho,syscore,aevum-police,millenium-fitness,snap-fitness,global-pharm,rothman-uni,lexo-corp,sigma-cosmetics,nectar-net,CSEC,neo-net,silver-helix,omega-net,the-hub,crush-fitness,summit-uni,I.I.I.I,rho-construction,avmnite-02h,zb-institute,netlink,catalyst,alpha-ent,galactic-cyber,aerocorp,omnia,univ-energy,solaris,zeus-med,nova-med,infocomm,applied-energetics,vitalife,zb-def,titan-labs,microdyne,stormtech,omnitek,blade,megacorp,fulcrumtech,helios,4sigma,nwo,clarkinc,The-Cave,kuai-gong,.,b-and-a,powerhouse-fitness,ecorp,fulcrumassets,deltaone,unitalife,defcomm,icarus,taiyang-digital,run4theh111z,joesguns,hong-fang-tea,zer0,harakiri-sushi,iron-gym,pserv-0,pserv-0-0\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"hosts-info.db.txt\",\"text\":\"[{\\\"hostName\\\":\\\"home\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":98,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":552.19,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":9.2,\\\"growTimeInSeconds\\\":29.45,\\\"weakenTimeInSeconds\\\":36.81,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"n00dles\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":95,\\\"maxMoneyInMillions\\\":1.75,\\\"availableMoneyInMillions\\\":1.34,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":9.34,\\\"growTimeInSeconds\\\":29.89,\\\"weakenTimeInSeconds\\\":37.36,\\\"maxRAM\\\":4},{\\\"hostName\\\":\\\"foodnstuff\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":91,\\\"maxMoneyInMillions\\\":50,\\\"availableMoneyInMillions\\\":8.19,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":9.52,\\\"growTimeInSeconds\\\":30.45,\\\"weakenTimeInSeconds\\\":38.06,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"max-hardware\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":67,\\\"maxMoneyInMillions\\\":250,\\\"availableMoneyInMillions\\\":10,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":64.1,\\\"growTimeInSeconds\\\":205.13,\\\"weakenTimeInSeconds\\\":256.41,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"phantasy\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":59,\\\"maxMoneyInMillions\\\":600,\\\"availableMoneyInMillions\\\":24,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":100.73,\\\"growTimeInSeconds\\\":322.34,\\\"weakenTimeInSeconds\\\":402.93,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"comptek\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":6029.49,\\\"availableMoneyInMillions\\\":241.18,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":1151.47,\\\"growTimeInSeconds\\\":3684.69,\\\"weakenTimeInSeconds\\\":4605.86,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"johnson-ortho\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":12,\\\"maxMoneyInMillions\\\":1976.92,\\\"availableMoneyInMillions\\\":79.08,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":741.58,\\\"growTimeInSeconds\\\":2373.04,\\\"weakenTimeInSeconds\\\":2966.3,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"syscore\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":14301.37,\\\"availableMoneyInMillions\\\":572.05,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1624.54,\\\"growTimeInSeconds\\\":5198.53,\\\"weakenTimeInSeconds\\\":6498.17,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"aevum-police\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":6593.27,\\\"availableMoneyInMillions\\\":263.73,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1356.18,\\\"growTimeInSeconds\\\":4339.78,\\\"weakenTimeInSeconds\\\":5424.73,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"millenium-fitness\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":6250,\\\"availableMoneyInMillions\\\":250,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":1057.19,\\\"growTimeInSeconds\\\":3383,\\\"weakenTimeInSeconds\\\":4228.75,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"snap-fitness\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":11250,\\\"availableMoneyInMillions\\\":450,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1908.29,\\\"growTimeInSeconds\\\":6106.52,\\\"weakenTimeInSeconds\\\":7633.15,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"global-pharm\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":43382.48,\\\"availableMoneyInMillions\\\":1735.3,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":2816.3,\\\"growTimeInSeconds\\\":9012.16,\\\"weakenTimeInSeconds\\\":11265.2,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"rothman-uni\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":4461.95,\\\"availableMoneyInMillions\\\":178.48,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":1030.82,\\\"growTimeInSeconds\\\":3298.61,\\\"weakenTimeInSeconds\\\":4123.26,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"lexo-corp\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":19781.74,\\\"availableMoneyInMillions\\\":791.27,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":2336.81,\\\"growTimeInSeconds\\\":7477.8,\\\"weakenTimeInSeconds\\\":9347.25,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"sigma-cosmetics\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":90,\\\"maxMoneyInMillions\\\":57.5,\\\"availableMoneyInMillions\\\":23.6,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":11,\\\"growTimeInSeconds\\\":35.19,\\\"weakenTimeInSeconds\\\":43.98,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"nectar-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":75,\\\"maxMoneyInMillions\\\":68.75,\\\"availableMoneyInMillions\\\":2.75,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":27.47,\\\"growTimeInSeconds\\\":87.91,\\\"weakenTimeInSeconds\\\":109.89,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"CSEC\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":84,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":11.86,\\\"growTimeInSeconds\\\":37.95,\\\"weakenTimeInSeconds\\\":47.44,\\\"maxRAM\\\":8},{\\\"hostName\\\":\\\"neo-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":65,\\\"maxMoneyInMillions\\\":125,\\\"availableMoneyInMillions\\\":5,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":66.39,\\\"growTimeInSeconds\\\":212.45,\\\"weakenTimeInSeconds\\\":265.57,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"silver-helix\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":43,\\\"maxMoneyInMillions\\\":1125,\\\"availableMoneyInMillions\\\":45,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":215.2,\\\"growTimeInSeconds\\\":688.64,\\\"weakenTimeInSeconds\\\":860.81,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"omega-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":34,\\\"maxMoneyInMillions\\\":1683.94,\\\"availableMoneyInMillions\\\":67.36,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":291.71,\\\"growTimeInSeconds\\\":933.48,\\\"weakenTimeInSeconds\\\":1166.85,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"the-hub\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":11,\\\"maxMoneyInMillions\\\":3874.15,\\\"availableMoneyInMillions\\\":154.97,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":627.66,\\\"growTimeInSeconds\\\":2008.5,\\\"weakenTimeInSeconds\\\":2510.62,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"crush-fitness\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":17,\\\"maxMoneyInMillions\\\":1490.67,\\\"availableMoneyInMillions\\\":59.63,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":547.07,\\\"growTimeInSeconds\\\":1750.62,\\\"weakenTimeInSeconds\\\":2188.28,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"summit-uni\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":5364.09,\\\"availableMoneyInMillions\\\":214.56,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":1036.63,\\\"growTimeInSeconds\\\":3317.22,\\\"weakenTimeInSeconds\\\":4146.52,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"I.I.I.I\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":7,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":9.16,\\\"growTimeInSeconds\\\":29.3,\\\"weakenTimeInSeconds\\\":36.63,\\\"maxRAM\\\":128},{\\\"hostName\\\":\\\"rho-construction\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":14770.33,\\\"availableMoneyInMillions\\\":590.81,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":1163,\\\"growTimeInSeconds\\\":3721.61,\\\"weakenTimeInSeconds\\\":4652.01,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"avmnite-02h\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":46,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":9.16,\\\"growTimeInSeconds\\\":29.3,\\\"weakenTimeInSeconds\\\":36.63,\\\"maxRAM\\\":64},{\\\"hostName\\\":\\\"zb-institute\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":20757.76,\\\"availableMoneyInMillions\\\":830.31,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2245.42,\\\"growTimeInSeconds\\\":7159.12,\\\"weakenTimeInSeconds\\\":8948.91,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"netlink\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":6875,\\\"availableMoneyInMillions\\\":275,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":1209.67,\\\"growTimeInSeconds\\\":3870.95,\\\"weakenTimeInSeconds\\\":4838.69,\\\"maxRAM\\\":128},{\\\"hostName\\\":\\\"catalyst\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":9339.37,\\\"availableMoneyInMillions\\\":373.57,\\\"numberOfPortsRequired\\\":3,\\\"hackTimeInSeconds\\\":1337.59,\\\"growTimeInSeconds\\\":4280.29,\\\"weakenTimeInSeconds\\\":5350.36,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"alpha-ent\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":18267.44,\\\"availableMoneyInMillions\\\":730.7,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":1613.82,\\\"growTimeInSeconds\\\":5164.23,\\\"weakenTimeInSeconds\\\":6455.29,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"galactic-cyber\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":20991.31,\\\"availableMoneyInMillions\\\":839.65,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2514.83,\\\"growTimeInSeconds\\\":8047.45,\\\"weakenTimeInSeconds\\\":10059.31,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"aerocorp\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":29661.1,\\\"availableMoneyInMillions\\\":1186.44,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3612.96,\\\"growTimeInSeconds\\\":11561.46,\\\"weakenTimeInSeconds\\\":14451.82,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"omnia\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":23200.38,\\\"availableMoneyInMillions\\\":928.02,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3825.73,\\\"growTimeInSeconds\\\":12242.34,\\\"weakenTimeInSeconds\\\":15302.92,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"univ-energy\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":27650.1,\\\"availableMoneyInMillions\\\":1106,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":3700.27,\\\"growTimeInSeconds\\\":11840.88,\\\"weakenTimeInSeconds\\\":14801.09,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"solaris\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":19808.8,\\\"availableMoneyInMillions\\\":792.35,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3005.29,\\\"growTimeInSeconds\\\":9616.93,\\\"weakenTimeInSeconds\\\":12021.17,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"zeus-med\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":35069.07,\\\"availableMoneyInMillions\\\":1402.76,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2605.38,\\\"growTimeInSeconds\\\":8337.23,\\\"weakenTimeInSeconds\\\":10421.53,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"nova-med\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":30857.73,\\\"availableMoneyInMillions\\\":1234.31,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":2821.26,\\\"growTimeInSeconds\\\":9028.03,\\\"weakenTimeInSeconds\\\":11285.04,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"infocomm\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":21236.08,\\\"availableMoneyInMillions\\\":849.44,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3219.71,\\\"growTimeInSeconds\\\":10303.07,\\\"weakenTimeInSeconds\\\":12878.83,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"applied-energetics\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":22764.52,\\\"availableMoneyInMillions\\\":910.58,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":2960.81,\\\"growTimeInSeconds\\\":9474.6,\\\"weakenTimeInSeconds\\\":11843.25,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"vitalife\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":18623.54,\\\"availableMoneyInMillions\\\":744.94,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3202.55,\\\"growTimeInSeconds\\\":10248.18,\\\"weakenTimeInSeconds\\\":12810.22,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"zb-def\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":25980.44,\\\"availableMoneyInMillions\\\":1039.22,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":2336.13,\\\"growTimeInSeconds\\\":7475.62,\\\"weakenTimeInSeconds\\\":9344.53,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"titan-labs\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":20629.29,\\\"availableMoneyInMillions\\\":825.17,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2810.58,\\\"growTimeInSeconds\\\":8993.87,\\\"weakenTimeInSeconds\\\":11242.34,\\\"maxRAM\\\":128},{\\\"hostName\\\":\\\"microdyne\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":15781.94,\\\"availableMoneyInMillions\\\":631.28,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2723.45,\\\"growTimeInSeconds\\\":8715.04,\\\"weakenTimeInSeconds\\\":10893.8,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"stormtech\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":26395.88,\\\"availableMoneyInMillions\\\":1055.84,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3337.59,\\\"growTimeInSeconds\\\":10680.29,\\\"weakenTimeInSeconds\\\":13350.36,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"omnitek\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":391789.06,\\\"availableMoneyInMillions\\\":15671.56,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":4268.8,\\\"growTimeInSeconds\\\":13660.15,\\\"weakenTimeInSeconds\\\":17075.18,\\\"maxRAM\\\":512},{\\\"hostName\\\":\\\"blade\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":253081.68,\\\"availableMoneyInMillions\\\":10123.27,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":4417.15,\\\"growTimeInSeconds\\\":14134.89,\\\"weakenTimeInSeconds\\\":17668.61,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"megacorp\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":1297267.85,\\\"availableMoneyInMillions\\\":51890.71,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":5808.21,\\\"growTimeInSeconds\\\":18586.28,\\\"weakenTimeInSeconds\\\":23232.85,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"fulcrumtech\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":38587.19,\\\"availableMoneyInMillions\\\":1543.49,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":4663.69,\\\"growTimeInSeconds\\\":14923.8,\\\"weakenTimeInSeconds\\\":18654.74,\\\"maxRAM\\\":256},{\\\"hostName\\\":\\\"helios\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":18057.88,\\\"availableMoneyInMillions\\\":722.32,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3366.88,\\\"growTimeInSeconds\\\":10774.01,\\\"weakenTimeInSeconds\\\":13467.52,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"4sigma\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":442922.71,\\\"availableMoneyInMillions\\\":17716.91,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2867.02,\\\"growTimeInSeconds\\\":9174.45,\\\"weakenTimeInSeconds\\\":11468.07,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"nwo\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":838599.99,\\\"availableMoneyInMillions\\\":33544,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":5392.7,\\\"growTimeInSeconds\\\":17256.64,\\\"weakenTimeInSeconds\\\":21570.8,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"clarkinc\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":388428.64,\\\"availableMoneyInMillions\\\":15537.15,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3313.96,\\\"growTimeInSeconds\\\":10604.67,\\\"weakenTimeInSeconds\\\":13255.84,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"The-Cave\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":9.12,\\\"growTimeInSeconds\\\":29.2,\\\"weakenTimeInSeconds\\\":36.5,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"kuai-gong\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":642449.28,\\\"availableMoneyInMillions\\\":25697.97,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":5383.21,\\\"growTimeInSeconds\\\":17226.28,\\\"weakenTimeInSeconds\\\":21532.85,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\".\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":9.12,\\\"growTimeInSeconds\\\":29.2,\\\"weakenTimeInSeconds\\\":36.5,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"b-and-a\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":634401.52,\\\"availableMoneyInMillions\\\":25376.06,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3572.76,\\\"growTimeInSeconds\\\":11432.85,\\\"weakenTimeInSeconds\\\":14291.06,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"powerhouse-fitness\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":22500,\\\"availableMoneyInMillions\\\":900,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":2831.2,\\\"growTimeInSeconds\\\":9059.85,\\\"weakenTimeInSeconds\\\":11324.82,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"ecorp\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":1588547.97,\\\"availableMoneyInMillions\\\":63541.92,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":5112.68,\\\"growTimeInSeconds\\\":16360.58,\\\"weakenTimeInSeconds\\\":20450.73,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"fulcrumassets\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":25,\\\"availableMoneyInMillions\\\":1,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":5794.66,\\\"growTimeInSeconds\\\":18542.92,\\\"weakenTimeInSeconds\\\":23178.65,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"deltaone\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":38255.04,\\\"availableMoneyInMillions\\\":1530.2,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3076.19,\\\"growTimeInSeconds\\\":9843.8,\\\"weakenTimeInSeconds\\\":12304.74,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"unitalife\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":25910.84,\\\"availableMoneyInMillions\\\":1036.43,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":2752.6,\\\"growTimeInSeconds\\\":8808.32,\\\"weakenTimeInSeconds\\\":11010.4,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"defcomm\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":20743.66,\\\"availableMoneyInMillions\\\":829.75,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":4607.66,\\\"growTimeInSeconds\\\":14744.53,\\\"weakenTimeInSeconds\\\":18430.66,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"icarus\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":24995.9,\\\"availableMoneyInMillions\\\":999.84,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3772.4,\\\"growTimeInSeconds\\\":12071.68,\\\"weakenTimeInSeconds\\\":15089.6,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"taiyang-digital\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":21769.99,\\\"availableMoneyInMillions\\\":870.8,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":3149.59,\\\"growTimeInSeconds\\\":10078.69,\\\"weakenTimeInSeconds\\\":12598.36,\\\"maxRAM\\\":0},{\\\"hostName\\\":\\\"run4theh111z\\\",\\\"hasRootAccess\\\":false,\\\"hackChancePercentage\\\":0,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":4,\\\"hackTimeInSeconds\\\":9.12,\\\"growTimeInSeconds\\\":29.2,\\\"weakenTimeInSeconds\\\":36.5,\\\"maxRAM\\\":512},{\\\"hostName\\\":\\\"joesguns\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":87,\\\"maxMoneyInMillions\\\":62.5,\\\"availableMoneyInMillions\\\":44.02,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":13.65,\\\"growTimeInSeconds\\\":43.69,\\\"weakenTimeInSeconds\\\":54.61,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"hong-fang-tea\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":83,\\\"maxMoneyInMillions\\\":75,\\\"availableMoneyInMillions\\\":20.14,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":22.67,\\\"growTimeInSeconds\\\":72.55,\\\"weakenTimeInSeconds\\\":90.69,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"zer0\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":60,\\\"maxMoneyInMillions\\\":187.5,\\\"availableMoneyInMillions\\\":7.5,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":94.66,\\\"growTimeInSeconds\\\":302.92,\\\"weakenTimeInSeconds\\\":378.65,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"harakiri-sushi\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":83,\\\"maxMoneyInMillions\\\":100,\\\"availableMoneyInMillions\\\":89.39,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":20.99,\\\"growTimeInSeconds\\\":67.16,\\\"weakenTimeInSeconds\\\":83.96,\\\"maxRAM\\\":16},{\\\"hostName\\\":\\\"iron-gym\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":52,\\\"maxMoneyInMillions\\\":500,\\\"availableMoneyInMillions\\\":20,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":145.99,\\\"growTimeInSeconds\\\":467.15,\\\"weakenTimeInSeconds\\\":583.94,\\\"maxRAM\\\":32},{\\\"hostName\\\":\\\"pserv-0\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":98,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":9.17,\\\"growTimeInSeconds\\\":29.34,\\\"weakenTimeInSeconds\\\":36.68,\\\"maxRAM\\\":8},{\\\"hostName\\\":\\\"pserv-0-0\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":98,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":9.17,\\\"growTimeInSeconds\\\":29.34,\\\"weakenTimeInSeconds\\\":36.68,\\\"maxRAM\\\":8}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"hosts-info-classified.db.txt\",\"text\":\"[{\\\"hostName\\\":\\\"home\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":98,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":552.19,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":9.2,\\\"growTimeInSeconds\\\":29.45,\\\"weakenTimeInSeconds\\\":36.81,\\\"maxRAM\\\":64,\\\"score\\\":0.7841666666666667},{\\\"hostName\\\":\\\"n00dles\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":95,\\\"maxMoneyInMillions\\\":1.75,\\\"availableMoneyInMillions\\\":1.34,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":9.34,\\\"growTimeInSeconds\\\":29.89,\\\"weakenTimeInSeconds\\\":37.36,\\\"maxRAM\\\":4,\\\"score\\\":0.3573552320619165},{\\\"hostName\\\":\\\"foodnstuff\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":91,\\\"maxMoneyInMillions\\\":50,\\\"availableMoneyInMillions\\\":8.19,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":9.52,\\\"growTimeInSeconds\\\":30.45,\\\"weakenTimeInSeconds\\\":38.06,\\\"maxRAM\\\":16,\\\"score\\\":0.35011869990072614},{\\\"hostName\\\":\\\"max-hardware\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":67,\\\"maxMoneyInMillions\\\":250,\\\"availableMoneyInMillions\\\":10,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":64.1,\\\"growTimeInSeconds\\\":205.13,\\\"weakenTimeInSeconds\\\":256.41,\\\"maxRAM\\\":32,\\\"score\\\":0.2722395211024765},{\\\"hostName\\\":\\\"phantasy\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":59,\\\"maxMoneyInMillions\\\":600,\\\"availableMoneyInMillions\\\":24,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":100.73,\\\"growTimeInSeconds\\\":322.34,\\\"weakenTimeInSeconds\\\":402.93,\\\"maxRAM\\\":32,\\\"score\\\":0.2716248506459436},{\\\"hostName\\\":\\\"johnson-ortho\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":12,\\\"maxMoneyInMillions\\\":1976.92,\\\"availableMoneyInMillions\\\":79.08,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":741.58,\\\"growTimeInSeconds\\\":2373.04,\\\"weakenTimeInSeconds\\\":2966.3,\\\"maxRAM\\\":0,\\\"score\\\":0.21098083085944672},{\\\"hostName\\\":\\\"sigma-cosmetics\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":90,\\\"maxMoneyInMillions\\\":57.5,\\\"availableMoneyInMillions\\\":23.6,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":11,\\\"growTimeInSeconds\\\":35.19,\\\"weakenTimeInSeconds\\\":43.98,\\\"maxRAM\\\":16,\\\"score\\\":0.35839995624919424},{\\\"hostName\\\":\\\"nectar-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":75,\\\"maxMoneyInMillions\\\":68.75,\\\"availableMoneyInMillions\\\":2.75,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":27.47,\\\"growTimeInSeconds\\\":87.91,\\\"weakenTimeInSeconds\\\":109.89,\\\"maxRAM\\\":16,\\\"score\\\":0.2870221183031811},{\\\"hostName\\\":\\\"CSEC\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":84,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":11.86,\\\"growTimeInSeconds\\\":37.95,\\\"weakenTimeInSeconds\\\":47.44,\\\"maxRAM\\\":8,\\\"score\\\":0.315},{\\\"hostName\\\":\\\"neo-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":65,\\\"maxMoneyInMillions\\\":125,\\\"availableMoneyInMillions\\\":5,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":66.39,\\\"growTimeInSeconds\\\":212.45,\\\"weakenTimeInSeconds\\\":265.57,\\\"maxRAM\\\":32,\\\"score\\\":0.2542447605512383},{\\\"hostName\\\":\\\"silver-helix\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":43,\\\"maxMoneyInMillions\\\":1125,\\\"availableMoneyInMillions\\\":45,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":215.2,\\\"growTimeInSeconds\\\":688.64,\\\"weakenTimeInSeconds\\\":860.81,\\\"maxRAM\\\":64,\\\"score\\\":0.25570284496114426},{\\\"hostName\\\":\\\"omega-net\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":34,\\\"maxMoneyInMillions\\\":1683.94,\\\"availableMoneyInMillions\\\":67.36,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":291.71,\\\"growTimeInSeconds\\\":933.48,\\\"weakenTimeInSeconds\\\":1166.85,\\\"maxRAM\\\":32,\\\"score\\\":0.2688821876320786},{\\\"hostName\\\":\\\"the-hub\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":11,\\\"maxMoneyInMillions\\\":3874.15,\\\"availableMoneyInMillions\\\":154.97,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":627.66,\\\"growTimeInSeconds\\\":2008.5,\\\"weakenTimeInSeconds\\\":2510.62,\\\"maxRAM\\\":16,\\\"score\\\":0.36651923100140654},{\\\"hostName\\\":\\\"crush-fitness\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":17,\\\"maxMoneyInMillions\\\":1490.67,\\\"availableMoneyInMillions\\\":59.63,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":547.07,\\\"growTimeInSeconds\\\":1750.62,\\\"weakenTimeInSeconds\\\":2188.28,\\\"maxRAM\\\":0,\\\"score\\\":0.1889062123151299},{\\\"hostName\\\":\\\"avmnite-02h\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":46,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":2,\\\"hackTimeInSeconds\\\":9.16,\\\"growTimeInSeconds\\\":29.3,\\\"weakenTimeInSeconds\\\":36.63,\\\"maxRAM\\\":64,\\\"score\\\":0.17250000000000001},{\\\"hostName\\\":\\\"joesguns\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":87,\\\"maxMoneyInMillions\\\":62.5,\\\"availableMoneyInMillions\\\":44.02,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":13.65,\\\"growTimeInSeconds\\\":43.69,\\\"weakenTimeInSeconds\\\":54.61,\\\"maxRAM\\\":16,\\\"score\\\":0.362827176179203},{\\\"hostName\\\":\\\"hong-fang-tea\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":83,\\\"maxMoneyInMillions\\\":75,\\\"availableMoneyInMillions\\\":20.14,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":22.67,\\\"growTimeInSeconds\\\":72.55,\\\"weakenTimeInSeconds\\\":90.69,\\\"maxRAM\\\":16,\\\"score\\\":0.330480206566471},{\\\"hostName\\\":\\\"zer0\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":60,\\\"maxMoneyInMillions\\\":187.5,\\\"availableMoneyInMillions\\\":7.5,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":94.66,\\\"growTimeInSeconds\\\":302.92,\\\"weakenTimeInSeconds\\\":378.65,\\\"maxRAM\\\":32,\\\"score\\\":0.24074214082685738},{\\\"hostName\\\":\\\"harakiri-sushi\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":83,\\\"maxMoneyInMillions\\\":100,\\\"availableMoneyInMillions\\\":89.39,\\\"numberOfPortsRequired\\\":0,\\\"hackTimeInSeconds\\\":20.99,\\\"growTimeInSeconds\\\":67.16,\\\"weakenTimeInSeconds\\\":83.96,\\\"maxRAM\\\":16,\\\"score\\\":0.3840786425500231},{\\\"hostName\\\":\\\"iron-gym\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":52,\\\"maxMoneyInMillions\\\":500,\\\"availableMoneyInMillions\\\":20,\\\"numberOfPortsRequired\\\":1,\\\"hackTimeInSeconds\\\":145.99,\\\"growTimeInSeconds\\\":467.15,\\\"weakenTimeInSeconds\\\":583.94,\\\"maxRAM\\\":32,\\\"score\\\":0.236979042204953},{\\\"hostName\\\":\\\"pserv-0\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":98,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":9.17,\\\"growTimeInSeconds\\\":29.34,\\\"weakenTimeInSeconds\\\":36.68,\\\"maxRAM\\\":8,\\\"score\\\":0.3675},{\\\"hostName\\\":\\\"pserv-0-0\\\",\\\"hasRootAccess\\\":true,\\\"hackChancePercentage\\\":98,\\\"maxMoneyInMillions\\\":0,\\\"availableMoneyInMillions\\\":0,\\\"numberOfPortsRequired\\\":5,\\\"hackTimeInSeconds\\\":9.17,\\\"growTimeInSeconds\\\":29.34,\\\"weakenTimeInSeconds\\\":36.68,\\\"maxRAM\\\":8,\\\"score\\\":0.3675}]\"}}],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"0.1.4.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"0.1.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"62.9.3.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":63541918683,\"moneyMax\":1588547967075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1130,\"serverGrowth\":99}},\"57.8.8.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"57.8.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"68.0.0.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51890713815,\"moneyMax\":1297267845375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1284,\"serverGrowth\":99}},\"96.4.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"96.4.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"61.9.2.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":25376060944,\"moneyMax\":634401523600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":919,\"serverGrowth\":63}},\"68.0.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"68.0.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"83.3.7.5\",\"57.8.8.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":10123267291,\"moneyMax\":253081682275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1098,\"serverGrowth\":81}},\"78.0.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"78.0.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"2.9.8.3\",\"49.2.9.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33543999505,\"moneyMax\":838599987625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1192,\"serverGrowth\":85}},\"8.9.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"8.9.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"2.9.8.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":15537145414,\"moneyMax\":388428635350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1249,\"serverGrowth\":58}},\"83.3.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900186.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[92,142,36,200,71,157,58,126,8,125,2,57,110,186,13,147,152,78,196,96,139,134,80,58,18,188,32,139,39,102,22,25,64,129,132,77,52,157,176]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"83.3.7.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"76.1.8.5\",\"68.0.0.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":15671562423,\"moneyMax\":391789060575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1004,\"serverGrowth\":97}},\"2.9.8.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"2.9.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"96.7.1.7\",\"78.0.8.2\",\"8.9.8.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":17716908519,\"moneyMax\":442922712975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1139,\"serverGrowth\":83}},\"66.5.5.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"66.5.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"51.2.1.3\",\"62.9.3.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":25697971090,\"moneyMax\":642449277250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1240,\"serverGrowth\":98}},\"51.2.1.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"51.2.1.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"53.5.6.6\",\"66.5.5.0\",\"61.9.2.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1543487727,\"moneyMax\":38587193175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1109,\"serverGrowth\":97}},\"48.6.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"48.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"62.9.3.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1281,\"serverGrowth\":1}},\"76.1.8.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"76.1.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"85.1.5.6\",\"83.3.7.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1055835316,\"moneyMax\":26395882900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":912,\"serverGrowth\":73}},\"21.1.9.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"21.1.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"44.9.8.6\",\"6.5.6.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":829746204,\"moneyMax\":20743655100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1050,\"serverGrowth\":50}},\"62.2.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"62.2.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"40.6.3.9\",\"21.4.7.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":849443367,\"moneyMax\":21236084175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":926,\"serverGrowth\":68}},\"96.7.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"96.7.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"53.5.6.6\",\"2.9.8.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":722315166,\"moneyMax\":18057879150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":846,\"serverGrowth\":80}},\"70.1.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"70.1.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"21.4.7.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":744941440,\"moneyMax\":18623536000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":875,\"serverGrowth\":68}},\"31.5.0.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"31.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"44.9.8.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":999835838,\"moneyMax\":24995895950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":887,\"serverGrowth\":87}},\"68.2.5.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"68.2.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"39.1.2.8\",\"92.7.1.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1106004113,\"moneyMax\":27650102825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":899,\"serverGrowth\":81}},\"53.5.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"53.5.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"92.7.1.6\",\"51.2.1.3\",\"96.7.1.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":825171783,\"moneyMax\":20629294575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":808,\"serverGrowth\":76}},\"85.1.5.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-100577.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[14,4,143,129,80,67,24,194,124,99,184,62,165,111],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"85.1.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"92.7.1.6\",\"76.1.8.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":631277704,\"moneyMax\":15781942600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":838,\"serverGrowth\":90}},\"6.5.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"6.5.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"21.1.9.5\",\"86.7.6.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":870799783,\"moneyMax\":21769994575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":943,\"serverGrowth\":76}},\"87.9.5.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-83455.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[120,184,7,65,182,176,43,151,177,141,155,197,103,143,114,119,165,97,14],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"87.9.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"88.6.3.2\",\"70.5.9.9\",\"44.9.8.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":839652541,\"moneyMax\":20991313525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":845,\"serverGrowth\":71}},\"87.0.3.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"87.0.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"88.6.3.2\",\"39.1.2.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1186444088,\"moneyMax\":29661102200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":908,\"serverGrowth\":55}},\"39.1.2.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"39.1.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"87.0.3.5\",\"68.2.5.8\",\"40.6.3.9\",\"32.9.0.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":928015393,\"moneyMax\":23200384825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":940,\"serverGrowth\":69}},\"92.7.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"92.7.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"68.2.5.8\",\"53.5.6.6\",\"85.1.5.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1039217615,\"moneyMax\":25980440375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":797,\"serverGrowth\":68}},\"21.4.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"21.4.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"62.2.3.3\",\"70.1.0.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":910580841,\"moneyMax\":22764521025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":819,\"serverGrowth\":75}},\"40.6.3.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"40.6.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"39.1.2.8\",\"62.2.3.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":792351999,\"moneyMax\":19808799975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":842,\"serverGrowth\":80}},\"70.5.9.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"70.5.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"87.9.5.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1530201527,\"moneyMax\":38255038175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":830,\"serverGrowth\":56}},\"91.0.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"91.0.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"27.5.4.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1735299061,\"moneyMax\":43382476525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":786,\"serverGrowth\":85}},\"51.8.9.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"51.8.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"32.9.0.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1234309086,\"moneyMax\":30857727150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":833,\"serverGrowth\":85}},\"32.9.0.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"32.9.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"39.1.2.8\",\"51.8.9.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1402762766,\"moneyMax\":35069069150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":813,\"serverGrowth\":71}},\"44.9.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"44.9.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"87.9.5.1\",\"21.1.9.5\",\"31.5.0.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1036433515,\"moneyMax\":25910837875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":781,\"serverGrowth\":73}},\"38.2.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-32255.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1161610\",25],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"38.2.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"61.6.0.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":791269403,\"moneyMax\":19781735075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":716,\"serverGrowth\":58}},\"24.2.2.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"24.2.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"1.6.2.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":590813127,\"moneyMax\":14770328175,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":504,\"serverGrowth\":42}},\"88.6.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"88.6.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"94.9.7.7\",\"87.9.5.1\",\"87.0.3.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":730697557,\"moneyMax\":18267438925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":525,\"serverGrowth\":52}},\"27.5.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"27.5.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"62.0.3.5\",\"91.0.3.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":263730644,\"moneyMax\":6593266100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":403,\"serverGrowth\":47}},\"61.6.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790978.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":388012731,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"61.6.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.4.7.6\",\"38.2.6.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":178478117,\"moneyMax\":4461952925,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":421,\"serverGrowth\":43}},\"0.7.9.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"0.7.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"98.3.4.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":830310260,\"moneyMax\":20757756500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":740,\"serverGrowth\":83}},\"14.6.7.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"14.6.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"93.4.7.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":214563630,\"moneyMax\":5364090750,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":440,\"serverGrowth\":49}},\"62.0.3.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"62.0.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"77.6.5.2\",\"27.5.4.1\",\"44.4.2.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":572054898,\"moneyMax\":14301372450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":560,\"serverGrowth\":61}},\"94.9.7.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"94.9.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"99.4.8.5\",\"88.6.3.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":373574921,\"moneyMax\":9339373025,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":416,\"serverGrowth\":30}},\"46.2.6.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"46.2.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[25094862,90,252,96]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3318.75,\"onlineMoneyMade\":25094862,\"onlineRunningTime\":4333.209999998254,\"pid\":260,\"ramUsage\":2.4,\"server\":\"46.2.6.8\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"46.2.6.8\",\"moduleSequenceNumber\":11489}}],\"serversOnNetwork\":[\"50.4.2.7\",\"1.6.2.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":154965940,\"moneyMax\":3874148500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":307,\"serverGrowth\":51}},\"10.4.7.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"10.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"12.2.0.7\",\"61.6.0.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":241179598,\"moneyMax\":6029489950,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":396,\"serverGrowth\":48}},\"99.4.8.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"99.4.8.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.4.1.6\",\"94.9.7.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":387,\"serverGrowth\":69}},\"77.6.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"77.6.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"77.6.5.2\",\"moduleSequenceNumber\":107}}],\"serversOnNetwork\":[\"12.2.0.7\",\"62.0.3.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":79076946,\"moneyMax\":1976923650,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":258,\"serverGrowth\":60}},\"22.5.4.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"22.5.4.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[4044888,17,42,16]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":566.25,\"onlineMoneyMade\":4044888,\"onlineRunningTime\":4373.609999998217,\"pid\":231,\"ramUsage\":2.4,\"server\":\"22.5.4.3\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\nvar target = \\\"n00dles\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"22.5.4.3\",\"moduleSequenceNumber\":108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = getHostname();\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"self-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"22.5.4.3\",\"moduleSequenceNumber\":109}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"22.5.4.3\",\"moduleSequenceNumber\":11369}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.7180000000000006,\"minDifficulty\":1,\"moneyAvailable\":1616090,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"94.4.9.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"94.4.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[21103038,90,252,96]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3330,\"onlineMoneyMade\":21103038,\"onlineRunningTime\":4370.20999999822,\"pid\":233,\"ramUsage\":2.4,\"server\":\"94.4.9.9\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\nvar target = \\\"foodnstuff\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"foodnstuff.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"94.4.9.9\",\"moduleSequenceNumber\":111}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = getHostname();\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"self-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"94.4.9.9\",\"moduleSequenceNumber\":112}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"94.4.9.9\",\"moduleSequenceNumber\":11371}}],\"serversOnNetwork\":[\"0.2.0.6\",\"38.9.4.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.80799999999978,\"minDifficulty\":3,\"moneyAvailable\":8193770.580266698,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"45.5.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"45.5.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[28358292,102,252,90]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3352.5,\"onlineMoneyMade\":28358292,\"onlineRunningTime\":4352.609999998236,\"pid\":245,\"ramUsage\":2.4,\"server\":\"45.5.8.6\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = getHostname();\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"self-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"45.5.8.6\",\"moduleSequenceNumber\":114}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"45.5.8.6\",\"moduleSequenceNumber\":11474}}],\"serversOnNetwork\":[\"0.2.0.6\",\"0.0.7.9\",\"62.0.9.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":8.027999999999853,\"minDifficulty\":3,\"moneyAvailable\":23599325.093563184,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"47.4.2.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"47.4.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[21599340,84,246,96]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3251.25,\"onlineMoneyMade\":21599340,\"onlineRunningTime\":4294.0099999982895,\"pid\":268,\"ramUsage\":2.4,\"server\":\"47.4.2.3\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = getHostname();\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"self-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"47.4.2.3\",\"moduleSequenceNumber\":116}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"47.4.2.3\",\"moduleSequenceNumber\":11497}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.2799999999999985,\"minDifficulty\":5,\"moneyAvailable\":46069961.13913898,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"80.3.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"80.3.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[49687807,182,533,208]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7020,\"onlineMoneyMade\":49687807,\"onlineRunningTime\":4287.609999998295,\"pid\":270,\"ramUsage\":2.4,\"server\":\"80.3.5.3\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"80.3.5.3\",\"moduleSequenceNumber\":11590}}],\"serversOnNetwork\":[\"60.3.7.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":10.060000000000004,\"minDifficulty\":8,\"moneyAvailable\":172848339.63928244,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"0.0.7.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915063.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0],[0,0,0],[1,0,0],[1,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-755012.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":753750511,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"0.0.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[28734648,108,246,90]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3375,\"onlineMoneyMade\":28734648,\"onlineRunningTime\":4349.209999998239,\"pid\":247,\"ramUsage\":2.4,\"server\":\"0.0.7.9\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"0.0.7.9\",\"moduleSequenceNumber\":11476}}],\"serversOnNetwork\":[\"45.5.8.6\",\"79.4.1.6\",\"37.8.5.1\",\"50.4.2.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"79.4.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-443200.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"645610193680\",-9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"79.4.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[44400512,169,533,221]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7020,\"onlineMoneyMade\":44400512,\"onlineRunningTime\":4342.809999998245,\"pid\":252,\"ramUsage\":2.4,\"server\":\"79.4.1.6\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"79.4.1.6\",\"moduleSequenceNumber\":11481}}],\"serversOnNetwork\":[\"0.0.7.9\",\"99.4.8.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"37.8.5.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"37.8.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[93776540,364,1118,416]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14283.75,\"onlineMoneyMade\":93776540,\"onlineRunningTime\":4339.609999998248,\"pid\":255,\"ramUsage\":2.4,\"server\":\"37.8.5.1\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"37.8.5.1\",\"moduleSequenceNumber\":11484}}],\"serversOnNetwork\":[\"0.0.7.9\",\"98.3.4.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"60.3.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"60.3.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[25119186,102,234,96]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3318.75,\"onlineMoneyMade\":25119186,\"onlineRunningTime\":4290.809999998292,\"pid\":269,\"ramUsage\":2.4,\"server\":\"60.3.7.3\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = getHostname();\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"self-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"60.3.7.3\",\"moduleSequenceNumber\":122}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"60.3.7.3\",\"moduleSequenceNumber\":11589}}],\"serversOnNetwork\":[\"0.2.0.6\",\"80.3.5.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.899999999999926,\"minDifficulty\":5,\"moneyAvailable\":20142468.027045596,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"97.3.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"97.3.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[30663942,120,228,102]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3397.5,\"onlineMoneyMade\":30663942,\"onlineRunningTime\":4284.209999998298,\"pid\":271,\"ramUsage\":2.4,\"server\":\"97.3.0.4\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    weaken('harakiri-sushi');\\n}\",\"filename\":\"weaken.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"97.3.0.4\",\"moduleSequenceNumber\":124}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = getHostname();\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"self-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"97.3.0.4\",\"moduleSequenceNumber\":125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"97.3.0.4\",\"moduleSequenceNumber\":11591}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":57116166,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"12.2.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759495.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,-5,-1,7,-10,-4,-5,5,-7,-5,9,2,-7,-8,6,3,7,7,1,-5,-5,9,-4,-8,10,3,1,-10,2,-1,10,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"12.2.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[45923904,195,520,221]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7117.5,\"onlineMoneyMade\":45923904,\"onlineRunningTime\":4363.809999998226,\"pid\":238,\"ramUsage\":2.4,\"server\":\"12.2.0.7\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"12.2.0.7\",\"moduleSequenceNumber\":11376}}],\"serversOnNetwork\":[\"38.9.4.2\",\"10.4.7.6\",\"77.6.5.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"38.9.4.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581746.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[1,7],[1,5],[24,27]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-313547-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[49,166,52,183,124,90,160,193,57,15,51,38,62,144,94,155,23,149,108,27,101,2,99,36,2,12,118,64,179,79,103,91,193,65,200,98,170,173,120,67,57,7,113],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"38.9.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[46064421,182,546,208]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7117.5,\"onlineMoneyMade\":46064421,\"onlineRunningTime\":4367.009999998223,\"pid\":236,\"ramUsage\":2.4,\"server\":\"38.9.4.2\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"38.9.4.2\",\"moduleSequenceNumber\":11374}}],\"serversOnNetwork\":[\"94.4.9.9\",\"12.2.0.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"50.4.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"50.4.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[65819975,247,533,208]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7434.375,\"onlineMoneyMade\":65819975,\"onlineRunningTime\":4336.409999998251,\"pid\":258,\"ramUsage\":2.4,\"server\":\"50.4.2.7\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"50.4.2.7\",\"moduleSequenceNumber\":11487}}],\"serversOnNetwork\":[\"0.0.7.9\",\"46.2.6.8\",\"93.4.7.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":67357733,\"moneyMax\":1683943325,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":187,\"serverGrowth\":33}},\"93.4.7.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"93.4.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"50.4.2.7\",\"14.6.7.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":59626907,\"moneyMax\":1490672675,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":267,\"serverGrowth\":31}},\"41.5.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"41.5.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[42877978,169,546,208]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6946.875,\"onlineMoneyMade\":42877978,\"onlineRunningTime\":4281.009999998301,\"pid\":272,\"ramUsage\":2.4,\"server\":\"41.5.1.6\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var possibleHosts = scan(\\\"home\\\");\\n\\nfor (var i = 0; i < possibleHosts.length; i++) {\\n    var target = possibleHosts[i];\\n    print('Conecting to target: ' + target);\\n\\n    if (hasRootAccess(target)) {\\n        var maxRam = getServerMaxRam(target);\\n        var usedRam = getServerUsedRam(target);\\n        var maxPossibleInstances = Math.floor((maxRam - usedRam) / 4);\\n        print('--------------------');\\n        print('Target: ' + target);\\n        print('maxRam: ' + maxRam);\\n        print('usedRam: ' + usedRam);\\n        print('maxPossibleInstances: ' + maxPossibleInstances);\\n        //scp(\\\"initial-hacking.script\\\", target);\\n        //exec(\\\"initial-hacking.script\\\", target, maxPossibleInstances);\\n    }\\n}\",\"filename\":\"corona-infect.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.95,\"server\":\"41.5.1.6\",\"moduleSequenceNumber\":130}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"41.5.1.6\",\"moduleSequenceNumber\":11592}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"44.4.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"44.4.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"62.0.3.5\",\"43.4.6.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":487,\"serverGrowth\":42}},\"62.9.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803208-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[68,35,176,180,197,148,145,3]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"62.9.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"66.5.5.0\",\"0.1.4.5\",\"48.6.8.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1031,\"serverGrowth\":56}},\"43.4.6.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"43.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"44.4.2.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":703,\"serverGrowth\":49}},\"86.7.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"86.7.6.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"6.5.6.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":544,\"serverGrowth\":0}},\"1.6.2.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-525369-Netburners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[87,135,165,40,175,72,8,80,109,176,138,56,185,139,15,6,2,130,81,130,195,196,2,189,75,84,140,95,102,25,186,108],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"1.6.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"46.2.6.8\",\"24.2.2.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":361,\"serverGrowth\":0}},\"98.3.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-264294.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[1,137,139,149,198,79,88]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"98.3.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[101005892,364,1066,416]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14040,\"onlineMoneyMade\":101005892,\"onlineRunningTime\":4325.609999998261,\"pid\":265,\"ramUsage\":2.4,\"server\":\"98.3.4.1\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"98.3.4.1\",\"moduleSequenceNumber\":11494}}],\"serversOnNetwork\":[\"37.8.5.1\",\"0.7.9.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":210,\"serverGrowth\":0}},\"61.9.2.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-858184.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,11],[5,7],[11,13],[9,11],[18,25],[18,26],[19,26],[16,17],[16,24]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"61.9.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"51.2.1.3\",\"96.4.1.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":510,\"serverGrowth\":0}},\"62.0.9.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204584.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"202224105144\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"62.0.9.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[11770749,42,126,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1642.5,\"onlineMoneyMade\":11770749,\"onlineRunningTime\":4346.009999998242,\"pid\":250,\"ramUsage\":2.4,\"server\":\"62.0.9.9\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"62.0.9.9\",\"moduleSequenceNumber\":11479}}],\"serversOnNetwork\":[\"45.5.8.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"49.2.9.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"49.2.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"78.0.8.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"77.4.4.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"77.4.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"19.3.4.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0-0\",\"httpPortOpen\":false,\"ip\":\"19.3.4.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[12683010,48,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1653.75,\"onlineMoneyMade\":12683010,\"onlineRunningTime\":4274.609999998307,\"pid\":274,\"ramUsage\":2.4,\"server\":\"19.3.4.3\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"19.3.4.3\",\"moduleSequenceNumber\":134}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"19.3.4.3\",\"moduleSequenceNumber\":11370}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.006,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"78.9.7.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0-1\",\"httpPortOpen\":false,\"ip\":\"78.9.7.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[12750810,48,126,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1681.875,\"onlineMoneyMade\":12750810,\"onlineRunningTime\":4369.209999998221,\"pid\":234,\"ramUsage\":2.4,\"server\":\"78.9.7.4\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"78.9.7.4\",\"moduleSequenceNumber\":136}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"78.9.7.4\",\"moduleSequenceNumber\":11372}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"9.3.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"9.3.5.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[15437976,60,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1738.125,\"onlineMoneyMade\":15437976,\"onlineRunningTime\":4367.209999998223,\"pid\":235,\"ramUsage\":2.4,\"server\":\"9.3.5.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"9.3.5.2\",\"moduleSequenceNumber\":138}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"9.3.5.2\",\"moduleSequenceNumber\":11373}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"73.8.0.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"73.8.0.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[11649078,42,126,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1642.5,\"onlineMoneyMade\":11649078,\"onlineRunningTime\":4365.209999998225,\"pid\":237,\"ramUsage\":2.4,\"server\":\"73.8.0.1\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"73.8.0.1\",\"moduleSequenceNumber\":140}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"73.8.0.1\",\"moduleSequenceNumber\":11375}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"62.0.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"62.0.4.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[15316521,57,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1721.25,\"onlineMoneyMade\":15316521,\"onlineRunningTime\":4363.009999998227,\"pid\":239,\"ramUsage\":2.4,\"server\":\"62.0.4.1\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"62.0.4.1\",\"moduleSequenceNumber\":142}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"62.0.4.1\",\"moduleSequenceNumber\":11377}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"15.3.5.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"15.3.5.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[12661521,48,126,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1676.25,\"onlineMoneyMade\":12661521,\"onlineRunningTime\":4361.0099999982285,\"pid\":240,\"ramUsage\":2.4,\"server\":\"15.3.5.5\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"15.3.5.5\",\"moduleSequenceNumber\":144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"15.3.5.5\",\"moduleSequenceNumber\":11378}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"74.1.0.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"74.1.0.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[11924223,48,120,51]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1665,\"onlineMoneyMade\":11924223,\"onlineRunningTime\":4359.00999999823,\"pid\":241,\"ramUsage\":2.4,\"server\":\"74.1.0.9\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"74.1.0.9\",\"moduleSequenceNumber\":146}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"74.1.0.9\",\"moduleSequenceNumber\":11379}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"29.1.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"29.1.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[14497392,57,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1721.25,\"onlineMoneyMade\":14497392,\"onlineRunningTime\":4357.009999998232,\"pid\":242,\"ramUsage\":2.4,\"server\":\"29.1.0.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"29.1.0.2\",\"moduleSequenceNumber\":148}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"29.1.0.2\",\"moduleSequenceNumber\":11380}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"26.3.9.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"26.3.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[15267804,60,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1738.125,\"onlineMoneyMade\":15267804,\"onlineRunningTime\":4354.809999998234,\"pid\":243,\"ramUsage\":2.4,\"server\":\"26.3.9.8\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"26.3.9.8\",\"moduleSequenceNumber\":150}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"26.3.9.8\",\"moduleSequenceNumber\":11381}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"13.5.3.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"13.5.3.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[9309519,36,123,51]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1597.5,\"onlineMoneyMade\":9309519,\"onlineRunningTime\":4352.809999998236,\"pid\":244,\"ramUsage\":2.4,\"server\":\"13.5.3.9\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"13.5.3.9\",\"moduleSequenceNumber\":152}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"13.5.3.9\",\"moduleSequenceNumber\":11473}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"63.0.3.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"63.0.3.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[12668292,48,117,51]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1653.75,\"onlineMoneyMade\":12668292,\"onlineRunningTime\":4350.809999998238,\"pid\":246,\"ramUsage\":2.4,\"server\":\"63.0.3.5\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"63.0.3.5\",\"moduleSequenceNumber\":154}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"63.0.3.5\",\"moduleSequenceNumber\":11475}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"4.8.4.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"4.8.4.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[12669147,45,126,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1648.125,\"onlineMoneyMade\":12669147,\"onlineRunningTime\":4348.80999999824,\"pid\":248,\"ramUsage\":2.4,\"server\":\"4.8.4.8\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"4.8.4.8\",\"moduleSequenceNumber\":156}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"4.8.4.8\",\"moduleSequenceNumber\":11477}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"7.0.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"7.0.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[16392546,60,120,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1721.25,\"onlineMoneyMade\":16392546,\"onlineRunningTime\":4346.809999998241,\"pid\":249,\"ramUsage\":2.4,\"server\":\"7.0.1.6\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"7.0.1.6\",\"moduleSequenceNumber\":158}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"7.0.1.6\",\"moduleSequenceNumber\":11478}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"64.6.5.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"64.6.5.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[13149363,54,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1698.75,\"onlineMoneyMade\":13149363,\"onlineRunningTime\":4344.609999998243,\"pid\":251,\"ramUsage\":2.4,\"server\":\"64.6.5.1\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"64.6.5.1\",\"moduleSequenceNumber\":160}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"64.6.5.1\",\"moduleSequenceNumber\":11480}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"40.9.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"40.9.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[13879839,51,117,51]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1665,\"onlineMoneyMade\":13879839,\"onlineRunningTime\":4342.609999998245,\"pid\":253,\"ramUsage\":2.4,\"server\":\"40.9.7.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"40.9.7.2\",\"moduleSequenceNumber\":162}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"40.9.7.2\",\"moduleSequenceNumber\":11482}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"49.7.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"49.7.0.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[8309454,30,129,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1575,\"onlineMoneyMade\":8309454,\"onlineRunningTime\":4340.609999998247,\"pid\":254,\"ramUsage\":2.4,\"server\":\"49.7.0.4\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"49.7.0.4\",\"moduleSequenceNumber\":164}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"49.7.0.4\",\"moduleSequenceNumber\":11483}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"94.2.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"94.2.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[13446084,54,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1698.75,\"onlineMoneyMade\":13446084,\"onlineRunningTime\":4338.609999998249,\"pid\":256,\"ramUsage\":2.4,\"server\":\"94.2.1.6\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"94.2.1.6\",\"moduleSequenceNumber\":166}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"94.2.1.6\",\"moduleSequenceNumber\":11485}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"46.8.4.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"46.8.4.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[13903098,51,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1676.25,\"onlineMoneyMade\":13903098,\"onlineRunningTime\":4336.609999998251,\"pid\":257,\"ramUsage\":2.4,\"server\":\"46.8.4.0\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"46.8.4.0\",\"moduleSequenceNumber\":168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"46.8.4.0\",\"moduleSequenceNumber\":11486}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"61.1.8.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"61.1.8.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[13262163,51,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1676.25,\"onlineMoneyMade\":13262163,\"onlineRunningTime\":4334.409999998253,\"pid\":259,\"ramUsage\":2.4,\"server\":\"61.1.8.5\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"61.1.8.5\",\"moduleSequenceNumber\":170}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"61.1.8.5\",\"moduleSequenceNumber\":11488}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"3.6.2.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"3.6.2.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[10755447,45,126,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1653.75,\"onlineMoneyMade\":10755447,\"onlineRunningTime\":4332.4099999982545,\"pid\":261,\"ramUsage\":2.4,\"server\":\"3.6.2.6\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"3.6.2.6\",\"moduleSequenceNumber\":172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"3.6.2.6\",\"moduleSequenceNumber\":11490}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"35.9.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"35.9.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[11965158,45,126,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1659.375,\"onlineMoneyMade\":11965158,\"onlineRunningTime\":4330.409999998256,\"pid\":262,\"ramUsage\":2.4,\"server\":\"35.9.7.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"35.9.7.2\",\"moduleSequenceNumber\":174}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"35.9.7.2\",\"moduleSequenceNumber\":11491}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"16.8.1.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"16.8.1.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[9055785,36,120,51]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1586.25,\"onlineMoneyMade\":9055785,\"onlineRunningTime\":4328.409999998258,\"pid\":263,\"ramUsage\":2.4,\"server\":\"16.8.1.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"16.8.1.2\",\"moduleSequenceNumber\":176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"16.8.1.2\",\"moduleSequenceNumber\":11492}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"79.8.8.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"79.8.8.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[13525179,54,123,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1693.125,\"onlineMoneyMade\":13525179,\"onlineRunningTime\":4326.20999999826,\"pid\":264,\"ramUsage\":2.4,\"server\":\"79.8.8.3\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"79.8.8.3\",\"moduleSequenceNumber\":178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"79.8.8.3\",\"moduleSequenceNumber\":11493}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"69.6.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"69.6.9.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[12143592,45,126,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1648.125,\"onlineMoneyMade\":12143592,\"onlineRunningTime\":4324.209999998262,\"pid\":266,\"ramUsage\":2.4,\"server\":\"69.6.9.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true){\\n    var hackChanceThreshold = 0.30;\\n    var possibleHosts = scan(\\\"home\\\");\\n    var targetHosts = [];\\n    \\n    for(var i = 0; i < possibleHosts.length; i++){\\n        var target = possibleHosts[i];\\n        var targetHackChance = hackChance(target);\\n        \\n        if(targetHackChance > hackChanceThreshold){\\n            targetHosts.push(target);\\n        }\\n    }\\n    \\n    //print(\\\"Eligible for hacking:\\\");\\n    \\n    for(var i = 0; i < targetHosts.length; i++){\\n        var target = targetHosts[i];\\n        print('Conecting to target: ' + target);\\n        \\n        if(!hasRootAccess(target)){\\n            nuke(target);\\n        }\\n        \\n        var securityThreshold = getServerMinSecurityLevel(target) + 5;\\n        var moneyThreshold = getServerMaxMoney(target) * 0.75;\\n        \\n        if (getServerSecurityLevel(target) > securityThreshold) {\\n            // If the server's security level is above our threshold, weaken it\\n            weaken(target);\\n        } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n            // If the server's money is less than our threshold, grow it\\n            grow(target);\\n        } else {\\n            // Otherwise, hack it\\n            hack(target);\\n        }\\n    }\\n}\",\"filename\":\"initial-hacking.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.7,\"server\":\"69.6.9.2\",\"moduleSequenceNumber\":180}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"69.6.9.2\",\"moduleSequenceNumber\":11495}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"60.7.2.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"60.7.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"97.3.0.4\":[16759080,66,117,48]},\"filename\":\"hack-target.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1738.125,\"onlineMoneyMade\":16759080,\"onlineRunningTime\":4277.809999998304,\"pid\":273,\"ramUsage\":2.4,\"server\":\"60.7.2.4\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = 'harakiri-sushi';\\nvar securityThreshold = getServerMinSecurityLevel(target) + 2;\\nvar moneyThreshold = getServerMaxMoney(target) * 0.90;\\n\\nwhile (true) {\\n    if (getServerSecurityLevel(target) > securityThreshold) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThreshold) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"hack-target.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"60.7.2.4\",\"moduleSequenceNumber\":11496}}],\"serversOnNetwork\":[\"0.2.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":64.33341538461573,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":299.7893846153851,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":28300.15038323022,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":83.26666666666733,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":12187.184974351956,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"ECorp\":\"0.1.4.5\",\"MegaCorp\":\"57.8.8.5\",\"Bachman & Associates\":\"96.4.1.6\",\"Blade Industries\":\"68.0.0.7\",\"NWO\":\"78.0.8.2\",\"Clarke Incorporated\":\"8.9.8.6\",\"OmniTek Incorporated\":\"83.3.7.5\",\"Four Sigma\":\"2.9.8.3\",\"KuaiGong International\":\"66.5.5.0\",\"Fulcrum Technologies\":\"51.2.1.3\",\"Fulcrum Secret Technologies Server\":\"48.6.8.2\",\"Storm Technologies\":\"76.1.8.5\",\"DefComm\":\"21.1.9.5\",\"Helios Labs\":\"96.7.1.7\",\"VitaLife\":\"70.1.0.4\",\"Icarus Microsystems\":\"31.5.0.1\",\"Universal Energy\":\"68.2.5.8\",\"Galactic Cybersystems\":\"87.9.5.1\",\"AeroCorp\":\"87.0.3.5\",\"Omnia Cybersystems\":\"39.1.2.8\",\"Solaris Space Systems\":\"40.6.3.9\",\"DeltaOne\":\"70.5.9.9\",\"Global Pharmaceuticals\":\"91.0.3.2\",\"Nova Medical\":\"51.8.9.1\",\"LexoCorp\":\"38.2.6.7\",\"Rho Construction\":\"24.2.2.5\",\"Alpha Enterprises\":\"88.6.3.2\",\"Aevum Police Headquarters\":\"27.5.4.1\",\"Rothman University\":\"61.6.0.7\",\"ZB Institute of Technology\":\"0.7.9.5\",\"Summit University\":\"14.6.7.0\",\"SysCore Securities\":\"62.0.3.5\",\"CompuTek\":\"10.4.7.6\",\"NetLink Technologies\":\"99.4.8.5\",\"Noodle Bar\":\"22.5.4.3\",\"FoodNStuff\":\"94.4.9.9\",\"Joe's Guns\":\"47.4.2.3\",\"Omega Software\":\"50.4.2.7\",\"Crush Fitness Gym\":\"93.4.7.0\",\"Iron Gym\":\"41.5.1.6\",\"Millenium Fitness Gym\":\"44.4.2.7\",\"Powerhouse Gym\":\"62.9.3.3\",\"Snap Fitness Gym\":\"43.4.6.4\",\"BitRunners Server\":\"86.7.6.6\",\"The Black Hand Server\":\"1.6.2.6\",\"NiteSec Server\":\"98.3.4.1\",\"The Dark Army Server\":\"61.9.2.5\",\"CyberSec Server\":\"62.0.9.9\",\"Daedalus Server\":\"49.2.9.9\",\"w0r1d_d43m0n\":\"77.4.4.8\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"Editor\":\"CodeMirror\",\"EditorKeybinding\":\"default\",\"EditorTheme\":\"dracula\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"EditorHighlightActiveLine\":true,\"EditorShowInvisibles\":false,\"EditorUseSoftTab\":true,\"EditorAutoCloseBrackets\":true,\"EditorEnableLinting\":false,\"EditorContinueComments\":true}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.52.0\"","AllGangsSave":"","LastExportBonus":"1628126465573"}}